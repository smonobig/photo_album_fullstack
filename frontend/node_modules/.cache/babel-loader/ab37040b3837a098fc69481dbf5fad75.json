{"ast":null,"code":"import { useEvent as $e9faafb641e167db$export$90fc3a17d93f704c } from \"./useEvent.module.js\";\nimport { useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c } from \"./useLayoutEffect.module.js\";\nimport { useRef as $hDRkU$useRef, useCallback as $hDRkU$useCallback } from \"react\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $26f7f3da73fcd9d6$export$7717c92ee915373e(props, ref) {\n  let {\n    isLoading: isLoading,\n    onLoadMore: onLoadMore,\n    scrollOffset = 1,\n    items: items\n  } = props;\n  // Handle scrolling, and call onLoadMore when nearing the bottom.\n  let isLoadingRef = (0, $hDRkU$useRef)(isLoading);\n  let prevProps = (0, $hDRkU$useRef)(props);\n  let onScroll = (0, $hDRkU$useCallback)(() => {\n    if (ref.current && !isLoadingRef.current && onLoadMore) {\n      let shouldLoadMore = ref.current.scrollHeight - ref.current.scrollTop - ref.current.clientHeight < ref.current.clientHeight * scrollOffset;\n      if (shouldLoadMore) {\n        isLoadingRef.current = true;\n        onLoadMore();\n      }\n    }\n  }, [onLoadMore, ref, scrollOffset]);\n  let lastItems = (0, $hDRkU$useRef)(items);\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {\n    // Only update isLoadingRef if props object actually changed,\n    // not if a local state change occurred.\n    if (props !== prevProps.current) {\n      isLoadingRef.current = isLoading;\n      prevProps.current = props;\n    }\n    // TODO: Eventually this hook will move back into RAC during which we will accept the collection as a option to this hook.\n    // We will only load more if the collection has changed after the last load to prevent multiple onLoadMore from being called\n    // while the data from the last onLoadMore is being processed by RAC collection.\n    let shouldLoadMore = (ref === null || ref === void 0 ? void 0 : ref.current) && !isLoadingRef.current && onLoadMore && (!items || items !== lastItems.current) && ref.current.clientHeight === ref.current.scrollHeight;\n    if (shouldLoadMore) {\n      isLoadingRef.current = true;\n      onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore();\n    }\n    lastItems.current = items;\n  }, [isLoading, onLoadMore, props, ref, items]);\n  // TODO: maybe this should still just return scroll props?\n  // Test against case where the ref isn't defined when this is called\n  // Think this was a problem when trying to attach to the scrollable body of the table in OnLoadMoreTableBodyScroll\n  (0, $e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'scroll', onScroll);\n}\nexport { $26f7f3da73fcd9d6$export$7717c92ee915373e as useLoadMore };","map":{"version":3,"sources":["packages/@react-aria/utils/src/useLoadMore.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;AAUC;;AAwBM,SAAS,yCAAA,CAAY,KAAoB,EAAE,GAAkC,EAAA;EAClF,IAAI;IAAA,SAAA,EAAC,SAAS;IAAA,UAAA,EAAE,UAAU;IAAE,YAAA,GAAe,CAAA;IAAA,KAAA,EAAG;EAAK,CAAC,GAAG,KAAA;EAEvD;EACA,IAAI,YAAA,GAAe,CAAA,CAAA,EAAA,aAAK,EAAE,SAAA,CAAA;EAC1B,IAAI,SAAA,GAAY,CAAA,CAAA,EAAA,aAAK,EAAE,KAAA,CAAA;EACvB,IAAI,QAAA,GAAW,CAAA,CAAA,EAAA,kBAAU,EAAE,MAAA;IACzB,IAAI,GAAA,CAAI,OAAO,IAAI,CAAC,YAAA,CAAa,OAAO,IAAI,UAAA,EAAY;MACtD,IAAI,cAAA,GAAiB,GAAA,CAAI,OAAO,CAAC,YAAY,GAAG,GAAA,CAAI,OAAO,CAAC,SAAS,GAAG,GAAA,CAAI,OAAO,CAAC,YAAY,GAAG,GAAA,CAAI,OAAO,CAAC,YAAY,GAAG,YAAA;MAE9H,IAAI,cAAA,EAAgB;QAClB,YAAA,CAAa,OAAO,GAAG,IAAA;QACvB,UAAA,CAAA,CAAA;MACF;IACF;EACF,CAAA,EAAG,CAAC,UAAA,EAAY,GAAA,EAAK,YAAA,CAAa,CAAA;EAElC,IAAI,SAAA,GAAY,CAAA,CAAA,EAAA,aAAK,EAAE,KAAA,CAAA;EACvB,CAAA,CAAA,EAAA,yCAAc,EAAE,MAAA;IACd;IACA;IACA,IAAI,KAAA,KAAU,SAAA,CAAU,OAAO,EAAE;MAC/B,YAAA,CAAa,OAAO,GAAG,SAAA;MACvB,SAAA,CAAU,OAAO,GAAG,KAAA;IACtB;IAEA;IACA;IACA;IACA,IAAI,cAAA,GAAiB,CAAA,GAAA,KAAA,IAAA,IAAA,GAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,OAAO,KAC5B,CAAC,YAAA,CAAa,OAAO,IACrB,UAAA,KACC,CAAC,KAAA,IAAS,KAAA,KAAU,SAAA,CAAU,OAAO,CAAA,IACtC,GAAA,CAAI,OAAO,CAAC,YAAY,KAAK,GAAA,CAAI,OAAO,CAAC,YAAY;IAE1D,IAAI,cAAA,EAAgB;MAClB,YAAA,CAAa,OAAO,GAAG,IAAA;MACvB,UAAA,KAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAA,CAAA;IACF;IAEA,SAAA,CAAU,OAAO,GAAG,KAAA;EACtB,CAAA,EAAG,CAAC,SAAA,EAAW,UAAA,EAAY,KAAA,EAAO,GAAA,EAAK,KAAA,CAAM,CAAA;EAE7C;EACA;EACA;EACA,CAAA,CAAA,EAAA,yCAAO,EAAE,GAAA,EAAK,QAAA,EAAU,QAAA,CAAA;AAC1B","sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback, useRef} from 'react';\nimport {useEvent} from './useEvent';\n\nimport {useLayoutEffect} from './useLayoutEffect';\n\nexport interface LoadMoreProps {\n  /** Whether data is currently being loaded. */\n  isLoading?: boolean,\n  /** Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.  */\n  onLoadMore?: () => void,\n  /**\n   * The amount of offset from the bottom of your scrollable region that should trigger load more.\n   * Uses a percentage value relative to the scroll body's client height. Load more is then triggered\n   * when your current scroll position's distance from the bottom of the currently loaded list of items is less than\n   * or equal to the provided value. (e.g. 1 = 100% of the scroll region's height).\n   * @default 1\n   */\n  scrollOffset?: number,\n  /** The data currently loaded. */\n  items?: any\n}\n\nexport function useLoadMore(props: LoadMoreProps, ref: RefObject<HTMLElement | null>): void {\n  let {isLoading, onLoadMore, scrollOffset = 1, items} = props;\n\n  // Handle scrolling, and call onLoadMore when nearing the bottom.\n  let isLoadingRef = useRef(isLoading);\n  let prevProps = useRef(props);\n  let onScroll = useCallback(() => {\n    if (ref.current && !isLoadingRef.current && onLoadMore) {\n      let shouldLoadMore = ref.current.scrollHeight - ref.current.scrollTop - ref.current.clientHeight < ref.current.clientHeight * scrollOffset;\n\n      if (shouldLoadMore) {\n        isLoadingRef.current = true;\n        onLoadMore();\n      }\n    }\n  }, [onLoadMore, ref, scrollOffset]);\n\n  let lastItems = useRef(items);\n  useLayoutEffect(() => {\n    // Only update isLoadingRef if props object actually changed,\n    // not if a local state change occurred.\n    if (props !== prevProps.current) {\n      isLoadingRef.current = isLoading;\n      prevProps.current = props;\n    }\n\n    // TODO: Eventually this hook will move back into RAC during which we will accept the collection as a option to this hook.\n    // We will only load more if the collection has changed after the last load to prevent multiple onLoadMore from being called\n    // while the data from the last onLoadMore is being processed by RAC collection.\n    let shouldLoadMore = ref?.current\n      && !isLoadingRef.current\n      && onLoadMore\n      && (!items || items !== lastItems.current)\n      && ref.current.clientHeight === ref.current.scrollHeight;\n\n    if (shouldLoadMore) {\n      isLoadingRef.current = true;\n      onLoadMore?.();\n    }\n\n    lastItems.current = items;\n  }, [isLoading, onLoadMore, props, ref, items]);\n\n  // TODO: maybe this should still just return scroll props?\n  // Test against case where the ref isn't defined when this is called\n  // Think this was a problem when trying to attach to the scrollable body of the table in OnLoadMoreTableBodyScroll\n  useEvent(ref, 'scroll', onScroll);\n}\n"]},"metadata":{},"sourceType":"module"}