{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */function $7215afc6de606d6b$export$de79e2c695e052f3(element) {\n  if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({\n    preventScroll: true\n  });else {\n    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);\n    element.focus();\n    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);\n  }\n}\nlet $7215afc6de606d6b$var$supportsPreventScrollCached = null;\nfunction $7215afc6de606d6b$var$supportsPreventScroll() {\n  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {\n    $7215afc6de606d6b$var$supportsPreventScrollCached = false;\n    try {\n      let focusElem = document.createElement('div');\n      focusElem.focus({\n        get preventScroll() {\n          $7215afc6de606d6b$var$supportsPreventScrollCached = true;\n          return true;\n        }\n      });\n    } catch {\n      // Ignore\n    }\n  }\n  return $7215afc6de606d6b$var$supportsPreventScrollCached;\n}\nfunction $7215afc6de606d6b$var$getScrollableElements(element) {\n  let parent = element.parentNode;\n  let scrollableElements = [];\n  let rootScrollingElement = document.scrollingElement || document.documentElement;\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({\n      element: parent,\n      scrollTop: parent.scrollTop,\n      scrollLeft: parent.scrollLeft\n    });\n    parent = parent.parentNode;\n  }\n  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({\n    element: rootScrollingElement,\n    scrollTop: rootScrollingElement.scrollTop,\n    scrollLeft: rootScrollingElement.scrollLeft\n  });\n  return scrollableElements;\n}\nfunction $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {\n  for (let {\n    element: element,\n    scrollTop: scrollTop,\n    scrollLeft: scrollLeft\n  } of scrollableElements) {\n    element.scrollTop = scrollTop;\n    element.scrollLeft = scrollLeft;\n  }\n}\nexport { $7215afc6de606d6b$export$de79e2c695e052f3 as focusWithoutScrolling };","map":{"version":3,"sources":["packages/@react-aria/utils/src/focusWithoutScrolling.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;AAUC,GAoBM,SAAS,yCAAA,CAAsB,OAAyB,EAAA;EAC7D,IAAI,2CAAA,CAAA,CAAA,EACF,OAAA,CAAQ,KAAK,CAAC;IAAC,aAAA,EAAe;EAAI,CAAA,CAAA,CAAA,KAC7B;IACL,IAAI,kBAAA,GAAqB,2CAAA,CAAsB,OAAA,CAAA;IAC/C,OAAA,CAAQ,KAAK,CAAA,CAAA;IACb,2CAAA,CAAsB,kBAAA,CAAA;EACxB;AACF;AAEA,IAAI,iDAAA,GAA8C,IAAA;AAClD,SAAS,2CAAA,CAAA,EAAA;EACP,IAAI,iDAAA,IAA+B,IAAA,EAAM;IACvC,iDAAA,GAA8B,KAAA;IAC9B,IAAI;MACF,IAAI,SAAA,GAAY,QAAA,CAAS,aAAa,CAAC,KAAA,CAAA;MACvC,SAAA,CAAU,KAAK,CAAC;QACd,IAAI,aAAA,CAAA,EAAgB;UAClB,iDAAA,GAA8B,IAAA;UAC9B,OAAO,IAAA;QACT;MACF,CAAA,CAAA;IACF,CAAA,CAAE,MAAM;MACN;IAAA;EAEJ;EAEA,OAAO,iDAAA;AACT;AAEA,SAAS,2CAAA,CAAsB,OAAyB,EAAA;EACtD,IAAI,MAAA,GAAS,OAAA,CAAQ,UAAU;EAC/B,IAAI,kBAAA,GAA0C,EAAE;EAChD,IAAI,oBAAA,GAAuB,QAAA,CAAS,gBAAgB,IAAI,QAAA,CAAS,eAAe;EAEhF,OAAO,MAAA,YAAkB,WAAA,IAAe,MAAA,KAAW,oBAAA,EAAsB;IACvE,IACE,MAAA,CAAO,YAAY,GAAG,MAAA,CAAO,YAAY,IACzC,MAAA,CAAO,WAAW,GAAG,MAAA,CAAO,WAAW,EAEvC,kBAAA,CAAmB,IAAI,CAAC;MACtB,OAAA,EAAS,MAAA;MACT,SAAA,EAAW,MAAA,CAAO,SAAS;MAC3B,UAAA,EAAY,MAAA,CAAO;IACrB,CAAA,CAAA;IAEF,MAAA,GAAS,MAAA,CAAO,UAAU;EAC5B;EAEA,IAAI,oBAAA,YAAgC,WAAA,EAClC,kBAAA,CAAmB,IAAI,CAAC;IACtB,OAAA,EAAS,oBAAA;IACT,SAAA,EAAW,oBAAA,CAAqB,SAAS;IACzC,UAAA,EAAY,oBAAA,CAAqB;EACnC,CAAA,CAAA;EAGF,OAAO,kBAAA;AACT;AAEA,SAAS,2CAAA,CAAsB,kBAAuC,EAAA;EACpE,KAAK,IAAI;IAAA,OAAA,EAAC,OAAO;IAAA,SAAA,EAAE,SAAS;IAAA,UAAA,EAAE;EAAU,CAAC,IAAI,kBAAA,EAAoB;IAC/D,OAAA,CAAQ,SAAS,GAAG,SAAA;IACpB,OAAA,CAAQ,UAAU,GAAG,UAAA;EACvB;AACF","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\n\n// This is a polyfill for element.focus({preventScroll: true});\n// Currently necessary for Safari and old Edge:\n// https://caniuse.com/#feat=mdn-api_htmlelement_focus_preventscroll_option\n// See https://bugs.webkit.org/show_bug.cgi?id=178583\n//\n\n// Original licensing for the following methods can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/calvellido/focus-options-polyfill\n\ninterface ScrollableElement {\n  element: HTMLElement,\n  scrollTop: number,\n  scrollLeft: number\n}\n\nexport function focusWithoutScrolling(element: FocusableElement): void {\n  if (supportsPreventScroll()) {\n    element.focus({preventScroll: true});\n  } else {\n    let scrollableElements = getScrollableElements(element);\n    element.focus();\n    restoreScrollPosition(scrollableElements);\n  }\n}\n\nlet supportsPreventScrollCached: boolean | null = null;\nfunction supportsPreventScroll() {\n  if (supportsPreventScrollCached == null) {\n    supportsPreventScrollCached = false;\n    try {\n      let focusElem = document.createElement('div');\n      focusElem.focus({\n        get preventScroll() {\n          supportsPreventScrollCached = true;\n          return true;\n        }\n      });\n    } catch {\n      // Ignore\n    }\n  }\n\n  return supportsPreventScrollCached;\n}\n\nfunction getScrollableElements(element: FocusableElement): ScrollableElement[] {\n  let parent = element.parentNode;\n  let scrollableElements: ScrollableElement[] = [];\n  let rootScrollingElement = document.scrollingElement || document.documentElement;\n\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (\n      parent.offsetHeight < parent.scrollHeight ||\n      parent.offsetWidth < parent.scrollWidth\n    ) {\n      scrollableElements.push({\n        element: parent,\n        scrollTop: parent.scrollTop,\n        scrollLeft: parent.scrollLeft\n      });\n    }\n    parent = parent.parentNode;\n  }\n\n  if (rootScrollingElement instanceof HTMLElement) {\n    scrollableElements.push({\n      element: rootScrollingElement,\n      scrollTop: rootScrollingElement.scrollTop,\n      scrollLeft: rootScrollingElement.scrollLeft\n    });\n  }\n\n  return scrollableElements;\n}\n\nfunction restoreScrollPosition(scrollableElements: ScrollableElement[]) {\n  for (let {element, scrollTop, scrollLeft} of scrollableElements) {\n    element.scrollTop = scrollTop;\n    element.scrollLeft = scrollLeft;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}