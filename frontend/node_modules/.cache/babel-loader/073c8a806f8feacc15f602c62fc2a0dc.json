{"ast":null,"code":"import { useCallback as $nrdL2$useCallback } from \"react\";\nimport { useEvent as $nrdL2$useEvent } from \"@react-aria/utils\";\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = (0, $nrdL2$useCallback)(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return;\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  (0, $nrdL2$useEvent)(ref, 'wheel', isDisabled ? undefined : onScrollHandler);\n}\nexport { $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel };","map":{"version":3,"sources":["packages/@react-aria/interactions/src/useScrollWheel.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;AAUC;;AAYM,SAAS,wCAAA,CAAe,KAAuB,EAAE,GAAkC,EAAA;EACxF,IAAI;IAAA,QAAA,EAAC,QAAQ;IAAA,UAAA,EAAE;EAAU,CAAC,GAAG,KAAA;EAC7B,IAAI,eAAA,GAAkB,CAAA,CAAA,EAAA,kBAAU,EAAG,CAAA,IAAA;IACjC;IACA,IAAI,CAAA,CAAE,OAAO,EACX;IAGF;IACA,CAAA,CAAE,cAAc,CAAA,CAAA;IAChB,CAAA,CAAE,eAAe,CAAA,CAAA;IAEjB,IAAI,QAAA,EACF,QAAA,CAAS;MAAC,MAAA,EAAQ,CAAA,CAAE,MAAM;MAAE,MAAA,EAAQ,CAAA,CAAE;IAAM,CAAA,CAAA;EAEhD,CAAA,EAAG,CAAC,QAAA,CAAS,CAAA;EAEb,CAAA,CAAA,EAAA,eAAO,EAAE,GAAA,EAAK,OAAA,EAAS,UAAA,GAAa,SAAA,GAAY,eAAA,CAAA;AAClD","sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, ScrollEvents} from '@react-types/shared';\nimport {useCallback} from 'react';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement | null>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? undefined : onScrollHandler);\n}\n"]},"metadata":{},"sourceType":"module"}