{"ast":null,"code":"import { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.module.js\";\nimport { useRef as $5GN7j$useRef, useMemo as $5GN7j$useMemo } from \"react\";\nimport { useGlobalListeners as $5GN7j$useGlobalListeners, useEffectEvent as $5GN7j$useEffectEvent } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $5GN7j$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $5GN7j$useGlobalListeners)();\n  let move = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType, deltaX, deltaY) => {\n    if (deltaX === 0 && deltaY === 0) return;\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n        type: 'movestart',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove === null || onMove === void 0 ? void 0 : onMove({\n      type: 'move',\n      pointerType: pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let end = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType) => {\n    (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n    if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n      type: 'moveend',\n      pointerType: pointerType,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let moveProps = (0, $5GN7j$useMemo)(() => {\n    let moveProps = {};\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n    if (typeof PointerEvent === 'undefined' && process.env.NODE_ENV === 'test') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          move(e, 'mouse', e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n        if (touch >= 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          move(e, 'touch', pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n          let pointerType = e.pointerType || 'mouse';\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n  return {\n    moveProps: moveProps\n  };\n}\nexport { $e8a7022cf87cba2a$export$36da96379f79f245 as useMove };","map":{"version":3,"sources":["packages/@react-aria/interactions/src/useMove.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let move = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart?.({\n        type: 'movestart',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove?.({\n      type: 'move',\n      pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n\n  let end = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    restoreTextSelection();\n    if (state.current.didMove) {\n      onMoveEnd?.({\n        type: 'moveend',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n  });\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    if (typeof PointerEvent === 'undefined' && process.env.NODE_ENV === 'test') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - (state.current.lastPosition?.pageX ?? 0), pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n\n  return {moveProps};\n}\n"]},"metadata":{},"sourceType":"module"}