{"ast":null,"code":"import { debounce, memo, notUndefined, approxEqual } from \"./utils.js\";\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  if (!targetWindow.ResizeObserver) {\n    return () => {};\n  }\n  const observer = new targetWindow.ResizeObserver(entries => {\n    const run = () => {\n      const entry = entries[0];\n      if (entry == null ? void 0 : entry.borderBoxSize) {\n        const box = entry.borderBoxSize[0];\n        if (box) {\n          handler({\n            width: box.inlineSize,\n            height: box.blockSize\n          });\n          return;\n        }\n      }\n      handler(element.getBoundingClientRect());\n    };\n    instance.options.useAnimationFrameWithResizeObserver ? requestAnimationFrame(run) : run();\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst addEventListenerOptions = {\n  passive: true\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst supportsScrollend = typeof window == \"undefined\" ? true : \"onscrollend\" in window;\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    const {\n      horizontal,\n      isRtl\n    } = instance.options;\n    offset = horizontal ? element[\"scrollLeft\"] * (isRtl && -1 || 1) : element[\"scrollTop\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  const registerScrollendEvent = instance.options.useScrollendEvent && supportsScrollend;\n  if (registerScrollendEvent) {\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  }\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    if (registerScrollendEvent) {\n      element.removeEventListener(\"scrollend\", endHandler);\n    }\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  const registerScrollendEvent = instance.options.useScrollendEvent && supportsScrollend;\n  if (registerScrollendEvent) {\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  }\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    if (registerScrollendEvent) {\n      element.removeEventListener(\"scrollend\", endHandler);\n    }\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, {\n  adjustments = 0,\n  behavior\n}, instance) => {\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, {\n  adjustments = 0,\n  behavior\n}, instance) => {\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.targetWindow = null;\n    this.isScrolling = false;\n    this.scrollToIndexTimeoutId = null;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollRect = null;\n    this.scrollOffset = null;\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.elementsCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        }\n        if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n          return null;\n        }\n        return _ro = new this.targetWindow.ResizeObserver(entries => {\n          entries.forEach(entry => {\n            const run = () => {\n              this._measureElement(entry.target, entry);\n            };\n            this.options.useAnimationFrameWithResizeObserver ? requestAnimationFrame(run) : run();\n          });\n        });\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          (_a = get()) == null ? void 0 : _a.disconnect();\n          _ro = null;\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(([key, value]) => {\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        gap: 0,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        isScrollingResetDelay: 150,\n        enabled: true,\n        isRtl: false,\n        useScrollendEvent: false,\n        useAnimationFrameWithResizeObserver: false,\n        ...opts2\n      };\n    };\n    this.notify = sync => {\n      var _a, _b;\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n    };\n    this.maybeNotify = memo(() => {\n      this.calculateRange();\n      return [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null];\n    }, isScrolling => {\n      this.notify(isScrolling);\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"maybeNotify\",\n      debug: () => this.options.debug,\n      initialDeps: [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null]\n    });\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.observer.disconnect();\n      this.scrollElement = null;\n      this.targetWindow = null;\n    };\n    this._didMount = () => {\n      return () => {\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      var _a;\n      const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        if (!scrollElement) {\n          this.maybeNotify();\n          return;\n        }\n        this.scrollElement = scrollElement;\n        if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n          this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n        } else {\n          this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n        }\n        this.elementsCache.forEach(cached => {\n          this.observer.observe(cached);\n        });\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.maybeNotify();\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0;\n          this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n          this.scrollOffset = offset;\n          this.isScrolling = isScrolling;\n          this.maybeNotify();\n        }));\n      }\n    };\n    this.getSize = () => {\n      if (!this.options.enabled) {\n        this.scrollRect = null;\n        return 0;\n      }\n      this.scrollRect = this.scrollRect ?? this.options.initialRect;\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.getScrollOffset = () => {\n      if (!this.options.enabled) {\n        this.scrollOffset = null;\n        return 0;\n      }\n      this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n      return this.scrollOffset;\n    };\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurementOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey, this.options.enabled], (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      };\n    }, {\n      key: false\n    });\n    this.getMeasurements = memo(() => [this.getMeasurementOptions(), this.itemSizeCache], ({\n      count,\n      paddingStart,\n      scrollMargin,\n      getItemKey,\n      enabled\n    }, itemSizeCache) => {\n      if (!enabled) {\n        this.measurementsCache = [];\n        this.itemSizeCache.clear();\n        return [];\n      }\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache;\n        this.measurementsCache.forEach(item => {\n          this.itemSizeCache.set(item.key, item.size);\n        });\n      }\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.getScrollOffset(), this.options.lanes], (measurements, outerSize, scrollOffset, lanes) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n        lanes\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualIndexes = memo(() => {\n      let startIndex = null;\n      let endIndex = null;\n      const range = this.calculateRange();\n      if (range) {\n        startIndex = range.startIndex;\n        endIndex = range.endIndex;\n      }\n      this.maybeNotify.updateDeps([this.isScrolling, startIndex, endIndex]);\n      return [this.options.rangeExtractor, this.options.overscan, this.options.count, startIndex, endIndex];\n    }, (rangeExtractor, overscan, count, startIndex, endIndex) => {\n      return startIndex === null || endIndex === null ? [] : rangeExtractor({\n        startIndex,\n        endIndex,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const index = this.indexFromElement(node);\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const key = item.key;\n      const prevNode = this.elementsCache.get(key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.elementsCache.set(key, node);\n      }\n      if (node.isConnected) {\n        this.resizeItem(index, this.options.measureElement(node, entry, this));\n      }\n    };\n    this.resizeItem = (index, size) => {\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.getScrollOffset(), {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        this.elementsCache.forEach((cached, key) => {\n          if (!cached.isConnected) {\n            this.observer.unobserve(cached);\n            this.elementsCache.delete(key);\n          }\n        });\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getVirtualIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualItems\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      if (measurements.length === 0) {\n        return void 0;\n      }\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = (toOffset, align, itemSize = 0) => {\n      const size = this.getSize();\n      const scrollOffset = this.getScrollOffset();\n      if (align === \"auto\") {\n        align = toOffset >= scrollOffset + size ? \"end\" : \"start\";\n      }\n      if (align === \"center\") {\n        toOffset += (itemSize - size) / 2;\n      } else if (align === \"end\") {\n        toOffset -= size;\n      }\n      const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n      const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n      const maxOffset = scrollSize - size;\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = (index, align = \"auto\") => {\n      index = Math.max(0, Math.min(index, this.options.count - 1));\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return void 0;\n      }\n      const size = this.getSize();\n      const scrollOffset = this.getScrollOffset();\n      if (align === \"auto\") {\n        if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [scrollOffset, align];\n        }\n      }\n      const toOffset = align === \"end\" ? item.end + this.options.scrollPaddingEnd : item.start - this.options.scrollPaddingStart;\n      return [this.getOffsetForAlignment(toOffset, align, item.size), align];\n    };\n    this.isDynamicMode = () => this.elementsCache.size > 0;\n    this.cancelScrollToIndex = () => {\n      if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n        this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId);\n        this.scrollToIndexTimeoutId = null;\n      }\n    };\n    this.scrollToOffset = (toOffset, {\n      align = \"start\",\n      behavior\n    } = {}) => {\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = (index, {\n      align: initialAlign = \"auto\",\n      behavior\n    } = {}) => {\n      index = Math.max(0, Math.min(index, this.options.count - 1));\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      const offsetAndAlign = this.getOffsetForIndex(index, initialAlign);\n      if (!offsetAndAlign) return;\n      const [offset, align] = offsetAndAlign;\n      this._scrollToOffset(offset, {\n        adjustments: void 0,\n        behavior\n      });\n      if (behavior !== \"smooth\" && this.isDynamicMode() && this.targetWindow) {\n        this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n          this.scrollToIndexTimeoutId = null;\n          const elementInDOM = this.elementsCache.has(this.options.getItemKey(index));\n          if (elementInDOM) {\n            const [latestOffset] = notUndefined(this.getOffsetForIndex(index, align));\n            if (!approxEqual(latestOffset, this.getScrollOffset())) {\n              this.scrollToIndex(index, {\n                align,\n                behavior\n              });\n            }\n          } else {\n            this.scrollToIndex(index, {\n              align,\n              behavior\n            });\n          }\n        });\n      }\n    };\n    this.scrollBy = (delta, {\n      behavior\n    } = {}) => {\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      this._scrollToOffset(this.getScrollOffset() + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else if (this.options.lanes === 1) {\n        end = ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0;\n      } else {\n        const endByLane = Array(this.options.lanes).fill(null);\n        let endIndex = measurements.length - 1;\n        while (endIndex >= 0 && endByLane.some(val => val === null)) {\n          const item = measurements[endIndex];\n          if (endByLane[item.lane] === null) {\n            endByLane[item.lane] = item.end;\n          }\n          endIndex--;\n        }\n        end = Math.max(...endByLane.filter(val => val !== null));\n      }\n      return Math.max(end - this.options.scrollMargin + this.options.paddingEnd, 0);\n    };\n    this._scrollToOffset = (offset, {\n      adjustments,\n      behavior\n    }) => {\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      this.notify(false);\n    };\n    this.setOptions(opts);\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n  lanes\n}) {\n  const lastIndex = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  if (measurements.length <= lanes) {\n    return {\n      startIndex: 0,\n      endIndex: lastIndex\n    };\n  }\n  let startIndex = findNearestBinarySearch(0, lastIndex, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  if (lanes === 1) {\n    while (endIndex < lastIndex && measurements[endIndex].end < scrollOffset + outerSize) {\n      endIndex++;\n    }\n  } else if (lanes > 1) {\n    const endPerLane = Array(lanes).fill(0);\n    while (endIndex < lastIndex && endPerLane.some(pos => pos < scrollOffset + outerSize)) {\n      const item = measurements[endIndex];\n      endPerLane[item.lane] = item.end;\n      endIndex++;\n    }\n    const startPerLane = Array(lanes).fill(scrollOffset + outerSize);\n    while (startIndex >= 0 && startPerLane.some(pos => pos >= scrollOffset)) {\n      const item = measurements[startIndex];\n      startPerLane[item.lane] = item.start;\n      startIndex--;\n    }\n    startIndex = Math.max(0, startIndex - startIndex % lanes);\n    endIndex = Math.min(lastIndex, endIndex + (lanes - 1 - endIndex % lanes));\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, debounce, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"sources":["../../src/index.ts"],"names":["opts"],"mappings":"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","sourcesContent":["import { approxEqual, debounce, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string | bigint\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const run = () => {\n      const entry = entries[0]\n      if (entry?.borderBoxSize) {\n        const box = entry.borderBoxSize[0]\n        if (box) {\n          handler({ width: box.inlineSize, height: box.blockSize })\n          return\n        }\n      }\n      handler(element.getBoundingClientRect())\n    }\n\n    instance.options.useAnimationFrameWithResizeObserver\n      ? requestAnimationFrame(run)\n      : run()\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\ntype ObserveOffsetCallBack = (offset: number, isScrolling: boolean) => void\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    const { horizontal, isRtl } = instance.options\n    offset = horizontal\n      ? element['scrollLeft'] * ((isRtl && -1) || 1)\n      : element['scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  const registerScrollendEvent =\n    instance.options.useScrollendEvent && supportsScrollend\n  if (registerScrollendEvent) {\n    element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n  }\n  return () => {\n    element.removeEventListener('scroll', handler)\n    if (registerScrollendEvent) {\n      element.removeEventListener('scrollend', endHandler)\n    }\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  const registerScrollendEvent =\n    instance.options.useScrollendEvent && supportsScrollend\n  if (registerScrollendEvent) {\n    element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n  }\n  return () => {\n    element.removeEventListener('scroll', handler)\n    if (registerScrollendEvent) {\n      element.removeEventListener('scrollend', endHandler)\n    }\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: ObserveOffsetCallBack,\n  ) => void | (() => void)\n  // Optional\n  debug?: boolean\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => Array<number>\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: Array<VirtualItem>\n  lanes?: number\n  isScrollingResetDelay?: number\n  useScrollendEvent?: boolean\n  enabled?: boolean\n  isRtl?: boolean\n  useAnimationFrameWithResizeObserver?: boolean\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: Array<void | (() => void)> = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: Array<VirtualItem> = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: Array<number> = []\n  scrollRect: Rect | null = null\n  scrollOffset: number | null = null\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  elementsCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          const run = () => {\n            this._measureElement(entry.target as TItemElement, entry)\n          }\n          this.options.useAnimationFrameWithResizeObserver\n            ? requestAnimationFrame(run)\n            : run()\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => {\n        get()?.disconnect()\n        _ro = null\n      },\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      enabled: true,\n      isRtl: false,\n      useScrollendEvent: false,\n      useAnimationFrameWithResizeObserver: false,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.observer.disconnect()\n    this.scrollElement = null\n    this.targetWindow = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.enabled\n      ? this.options.getScrollElement()\n      : null\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      if (!scrollElement) {\n        this.maybeNotify()\n        return\n      }\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this.elementsCache.forEach((cached) => {\n        this.observer.observe(cached)\n      })\n\n      this._scrollToOffset(this.getScrollOffset(), {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.getScrollOffset() < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n          this.isScrolling = isScrolling\n\n          this.maybeNotify()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    if (!this.options.enabled) {\n      this.scrollRect = null\n      return 0\n    }\n\n    this.scrollRect = this.scrollRect ?? this.options.initialRect\n\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getScrollOffset = () => {\n    if (!this.options.enabled) {\n      this.scrollOffset = null\n      return 0\n    }\n\n    this.scrollOffset =\n      this.scrollOffset ??\n      (typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset)\n\n    return this.scrollOffset\n  }\n\n  private getFurthestMeasurement = (\n    measurements: Array<VirtualItem>,\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n      this.options.enabled,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    (\n      { count, paddingStart, scrollMargin, getItemKey, enabled },\n      itemSizeCache,\n    ) => {\n      if (!enabled) {\n        this.measurementsCache = []\n        this.itemSizeCache.clear()\n        return []\n      }\n\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache\n        this.measurementsCache.forEach((item) => {\n          this.itemSizeCache.set(item.key, item.size)\n        })\n      }\n\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [\n      this.getMeasurements(),\n      this.getSize(),\n      this.getScrollOffset(),\n      this.options.lanes,\n    ],\n    (measurements, outerSize, scrollOffset, lanes) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n              lanes,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualIndexes = memo(\n    () => {\n      let startIndex: number | null = null\n      let endIndex: number | null = null\n      const range = this.calculateRange()\n      if (range) {\n        startIndex = range.startIndex\n        endIndex = range.endIndex\n      }\n      this.maybeNotify.updateDeps([this.isScrolling, startIndex, endIndex])\n      return [\n        this.options.rangeExtractor,\n        this.options.overscan,\n        this.options.count,\n        startIndex,\n        endIndex,\n      ]\n    },\n    (rangeExtractor, overscan, count, startIndex, endIndex) => {\n      return startIndex === null || endIndex === null\n        ? []\n        : rangeExtractor({\n            startIndex,\n            endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const key = item.key\n    const prevNode = this.elementsCache.get(key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.elementsCache.set(key, node)\n    }\n\n    if (node.isConnected) {\n      this.resizeItem(index, this.options.measureElement(node, entry, this))\n    }\n  }\n\n  resizeItem = (index: number, size: number) => {\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.getScrollOffset() + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null | undefined) => {\n    if (!node) {\n      this.elementsCache.forEach((cached, key) => {\n        if (!cached.isConnected) {\n          this.observer.unobserve(cached)\n          this.elementsCache.delete(key)\n        }\n      })\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getVirtualIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: Array<VirtualItem> = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualItems',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n    if (measurements.length === 0) {\n      return undefined\n    }\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (\n    toOffset: number,\n    align: ScrollAlignment,\n    itemSize = 0,\n  ) => {\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      align = toOffset >= scrollOffset + size ? 'end' : 'start'\n    }\n\n    if (align === 'center') {\n      // When aligning to a particular item (e.g. with scrollToIndex),\n      // adjust offset by the size of the item to center on the item\n      toOffset += (itemSize - size) / 2\n    } else if (align === 'end') {\n      toOffset -= size\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - size\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return undefined\n    }\n\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n        align = 'start'\n      } else {\n        return [scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? item.end + this.options.scrollPaddingEnd\n        : item.start - this.options.scrollPaddingStart\n\n    return [\n      this.getOffsetForAlignment(toOffset, align, item.size),\n      align,\n    ] as const\n  }\n\n  private isDynamicMode = () => this.elementsCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const offsetAndAlign = this.getOffsetForIndex(index, initialAlign)\n    if (!offsetAndAlign) return\n\n    const [offset, align] = offsetAndAlign\n\n    this._scrollToOffset(offset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.elementsCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [latestOffset] = notUndefined(\n            this.getOffsetForIndex(index, align),\n          )\n\n          if (!approxEqual(latestOffset, this.getScrollOffset())) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getScrollOffset() + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    // If there is only one lane, use the last measurement's end\n    // Otherwise find the maximum end value among all measurements\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else if (this.options.lanes === 1) {\n      end = measurements[measurements.length - 1]?.end ?? 0\n    } else {\n      const endByLane = Array<number | null>(this.options.lanes).fill(null)\n      let endIndex = measurements.length - 1\n      while (endIndex >= 0 && endByLane.some((val) => val === null)) {\n        const item = measurements[endIndex]!\n        if (endByLane[item.lane] === null) {\n          endByLane[item.lane] = item.end\n        }\n\n        endIndex--\n      }\n\n      end = Math.max(...endByLane.filter((val): val is number => val !== null))\n    }\n\n    return Math.max(\n      end - this.options.scrollMargin + this.options.paddingEnd,\n      0,\n    )\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n  lanes,\n}: {\n  measurements: Array<VirtualItem>\n  outerSize: number\n  scrollOffset: number\n  lanes: number\n}) {\n  const lastIndex = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  // handle case when item count is less than or equal to lanes\n  if (measurements.length <= lanes) {\n    return {\n      startIndex: 0,\n      endIndex: lastIndex,\n    }\n  }\n\n  let startIndex = findNearestBinarySearch(\n    0,\n    lastIndex,\n    getOffset,\n    scrollOffset,\n  )\n  let endIndex = startIndex\n\n  if (lanes === 1) {\n    while (\n      endIndex < lastIndex &&\n      measurements[endIndex]!.end < scrollOffset + outerSize\n    ) {\n      endIndex++\n    }\n  } else if (lanes > 1) {\n    // Expand forward until we include the visible items from all lanes\n    // which are closer to the end of the virtualizer window\n    const endPerLane = Array(lanes).fill(0)\n    while (\n      endIndex < lastIndex &&\n      endPerLane.some((pos) => pos < scrollOffset + outerSize)\n    ) {\n      const item = measurements[endIndex]!\n      endPerLane[item.lane] = item.end\n      endIndex++\n    }\n\n    // Expand backward until we include all lanes' visible items\n    // closer to the top\n    const startPerLane = Array(lanes).fill(scrollOffset + outerSize)\n    while (startIndex >= 0 && startPerLane.some((pos) => pos >= scrollOffset)) {\n      const item = measurements[startIndex]!\n      startPerLane[item.lane] = item.start\n      startIndex--\n    }\n\n    // Align startIndex to the beginning of its lane\n    startIndex = Math.max(0, startIndex - (startIndex % lanes))\n    // Align endIndex to the end of its lane\n    endIndex = Math.min(lastIndex, endIndex + (lanes - 1 - (endIndex % lanes)))\n  }\n\n  return { startIndex, endIndex }\n}\n"]},"metadata":{},"sourceType":"module"}