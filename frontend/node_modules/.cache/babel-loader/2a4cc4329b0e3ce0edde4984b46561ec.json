{"ast":null,"code":"import { useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c } from \"./useLayoutEffect.module.js\";\nimport { useValueEffect as $1dbecbe27a04f9af$export$14d238f342723f25 } from \"./useValueEffect.module.js\";\nimport { useState as $eKkEp$useState, useRef as $eKkEp$useRef, useEffect as $eKkEp$useEffect, useCallback as $eKkEp$useCallback } from \"react\";\nimport { useSSRSafeId as $eKkEp$useSSRSafeId } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\nlet $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nlet $bdb11010cef70236$export$d41a04c74483c6ef = new Map();\n// This allows us to clean up the idsUpdaterMap when the id is no longer used.\n// Map is a strong reference, so unused ids wouldn't be cleaned up otherwise.\n// This can happen in suspended components where mount/unmount is not called.\nlet $bdb11010cef70236$var$registry;\nif (typeof FinalizationRegistry !== 'undefined') $bdb11010cef70236$var$registry = new FinalizationRegistry(heldValue => {\n  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);\n});\nfunction $bdb11010cef70236$export$f680877a34711e37(defaultId) {\n  let [value, setValue] = (0, $eKkEp$useState)(defaultId);\n  let nextId = (0, $eKkEp$useRef)(null);\n  let res = (0, $eKkEp$useSSRSafeId)(value);\n  let cleanupRef = (0, $eKkEp$useRef)(null);\n  if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.register(cleanupRef, res);\n  if ($bdb11010cef70236$var$canUseDOM) {\n    const cacheIdRef = $bdb11010cef70236$export$d41a04c74483c6ef.get(res);\n    if (cacheIdRef && !cacheIdRef.includes(nextId)) cacheIdRef.push(nextId);else $bdb11010cef70236$export$d41a04c74483c6ef.set(res, [nextId]);\n  }\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {\n    let r = res;\n    return () => {\n      // In Suspense, the cleanup function may be not called\n      // when it is though, also remove it from the finalization registry.\n      if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.unregister(cleanupRef);\n      $bdb11010cef70236$export$d41a04c74483c6ef.delete(r);\n    };\n  }, [res]);\n  // This cannot cause an infinite loop because the ref is always cleaned up.\n  // eslint-disable-next-line\n  (0, $eKkEp$useEffect)(() => {\n    let newId = nextId.current;\n    if (newId) setValue(newId);\n    return () => {\n      if (newId) nextId.current = null;\n    };\n  });\n  return res;\n}\nfunction $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {\n  if (idA === idB) return idA;\n  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);\n  if (setIdsA) {\n    setIdsA.forEach(ref => ref.current = idB);\n    return idB;\n  }\n  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);\n  if (setIdsB) {\n    setIdsB.forEach(ref => ref.current = idA);\n    return idA;\n  }\n  return idB;\n}\nfunction $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {\n  let id = $bdb11010cef70236$export$f680877a34711e37();\n  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);\n  let updateId = (0, $eKkEp$useCallback)(() => {\n    setResolvedId(function* () {\n      yield id;\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);\n  return resolvedId;\n}\nexport { $bdb11010cef70236$export$d41a04c74483c6ef as idsUpdaterMap, $bdb11010cef70236$export$f680877a34711e37 as useId, $bdb11010cef70236$export$cd8c9cb68f842629 as mergeIds, $bdb11010cef70236$export$b4cc09c592e8fdb8 as useSlotId };","map":{"version":3,"sources":["packages/@react-aria/utils/src/useId.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLayoutEffect} from './useLayoutEffect';\nimport {useSSRSafeId} from '@react-aria/ssr';\nimport {useValueEffect} from './';\n\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport let idsUpdaterMap: Map<string, { current: string | null }[]> = new Map();\n// This allows us to clean up the idsUpdaterMap when the id is no longer used.\n// Map is a strong reference, so unused ids wouldn't be cleaned up otherwise.\n// This can happen in suspended components where mount/unmount is not called.\nlet registry;\nif (typeof FinalizationRegistry !== 'undefined') {\n  registry = new FinalizationRegistry<string>((heldValue) => {\n    idsUpdaterMap.delete(heldValue);\n  });\n}\n\n/**\n * If a default is not provided, generate an id.\n * @param defaultId - Default component id.\n */\nexport function useId(defaultId?: string): string {\n  let [value, setValue] = useState(defaultId);\n  let nextId = useRef(null);\n\n  let res = useSSRSafeId(value);\n  let cleanupRef = useRef(null);\n\n  if (registry) {\n    registry.register(cleanupRef, res);\n  }\n\n  if (canUseDOM) {\n    const cacheIdRef = idsUpdaterMap.get(res);\n    if (cacheIdRef && !cacheIdRef.includes(nextId)) {\n      cacheIdRef.push(nextId);\n    } else {\n      idsUpdaterMap.set(res, [nextId]);\n    }\n  }\n\n  useLayoutEffect(() => {\n    let r = res;\n    return () => {\n      // In Suspense, the cleanup function may be not called\n      // when it is though, also remove it from the finalization registry.\n      if (registry) {\n        registry.unregister(cleanupRef);\n      }\n      idsUpdaterMap.delete(r);\n    };\n  }, [res]);\n\n  // This cannot cause an infinite loop because the ref is always cleaned up.\n  // eslint-disable-next-line\n  useEffect(() => {\n    let newId = nextId.current;\n    if (newId) { setValue(newId); }\n\n    return () => {\n      if (newId) { nextId.current = null; }\n    };\n  });\n\n  return res;\n}\n\n/**\n * Merges two ids.\n * Different ids will trigger a side-effect and re-render components hooked up with `useId`.\n */\nexport function mergeIds(idA: string, idB: string): string {\n  if (idA === idB) {\n    return idA;\n  }\n\n  let setIdsA = idsUpdaterMap.get(idA);\n  if (setIdsA) {\n    setIdsA.forEach(ref => (ref.current = idB));\n    return idB;\n  }\n\n  let setIdsB = idsUpdaterMap.get(idB);\n  if (setIdsB) {\n    setIdsB.forEach((ref) => (ref.current = idA));\n    return idA;\n  }\n\n  return idB;\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as labelledby.\n * @param depArray - When to recalculate if the id is in the DOM.\n */\nexport function useSlotId(depArray: ReadonlyArray<any> = []): string {\n  let id = useId();\n  let [resolvedId, setResolvedId] = useValueEffect(id);\n  let updateId = useCallback(() => {\n    setResolvedId(function *() {\n      yield id;\n\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n\n  useLayoutEffect(updateId, [id, updateId, ...depArray]);\n\n  return resolvedId;\n}\n"]},"metadata":{},"sourceType":"module"}