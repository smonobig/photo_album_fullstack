{"ast":null,"code":"import * as React from \"react\";\nimport { flushSync } from \"react-dom\";\nimport { Virtualizer, elementScroll, observeElementOffset, observeElementRect, windowScroll, observeWindowOffset, observeWindowRect } from \"@tanstack/virtual-core\";\nexport * from \"@tanstack/virtual-core\";\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? React.useLayoutEffect : React.useEffect;\nfunction useVirtualizerBase(options) {\n  const rerender = React.useReducer(() => ({}), {})[1];\n  const resolvedOptions = {\n    ...options,\n    onChange: (instance2, sync) => {\n      var _a;\n      if (sync) {\n        flushSync(rerender);\n      } else {\n        rerender();\n      }\n      (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);\n    }\n  };\n  const [instance] = React.useState(() => new Virtualizer(resolvedOptions));\n  instance.setOptions(resolvedOptions);\n  useIsomorphicLayoutEffect(() => {\n    return instance._didMount();\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate();\n  });\n  return instance;\n}\nfunction useVirtualizer(options) {\n  return useVirtualizerBase({\n    observeElementRect,\n    observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options\n  });\n}\nfunction useWindowVirtualizer(options) {\n  return useVirtualizerBase({\n    getScrollElement: () => typeof document !== \"undefined\" ? window : null,\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => typeof document !== \"undefined\" ? window.scrollY : 0,\n    ...options\n  });\n}\nexport { useVirtualizer, useWindowVirtualizer };","map":{"version":3,"sources":["../../src/index.tsx"],"names":["instance"],"mappings":";;;;AAeA,MAAM,yBAAA,GACJ,OAAO,QAAA,KAAa,WAAA,GAAc,KAAA,CAAM,eAAA,GAAkB,KAAA,CAAM,SAAA;AAElE,SAAS,kBAAA,CAIP,OAAA,EAC2C;EACrC,MAAA,QAAA,GAAW,KAAA,CAAM,UAAA,CAAW,OAAO,CAAA,CAAA,CAAA,EAAK,CAAA,CAAE,CAAA,CAAE,CAAC,CAAA;EAEnD,MAAM,eAAA,GAAoE;IACxE,GAAG,OAAA;IACH,QAAA,EAAU,CAACA,SAAAA,EAAU,IAAA,KAAS;;MAC5B,IAAI,IAAA,EAAM;QACR,SAAA,CAAU,QAAQ,CAAA;MAAA,CAAA,MACb;QACI,QAAA,CAAA,CAAA;MAAA;MAEH,CAAA,EAAA,GAAA,OAAA,CAAA,QAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,OAAA,EAAWA,SAAAA,EAAU,IAAA,CAAA;IAAI;EAErC,CAAA;EAEM,MAAA,CAAC,QAAQ,CAAA,GAAI,KAAA,CAAM,QAAA,CACvB,MAAM,IAAI,WAAA,CAA0C,eAAe,CACrE,CAAA;EAEA,QAAA,CAAS,UAAA,CAAW,eAAe,CAAA;EAEnC,yBAAA,CAA0B,MAAM;IAC9B,OAAO,QAAA,CAAS,SAAA,CAAU,CAAA;EAC5B,CAAA,EAAG,EAAE,CAAA;EAEL,yBAAA,CAA0B,MAAM;IAC9B,OAAO,QAAA,CAAS,WAAA,CAAY,CAAA;EAAA,CAC7B,CAAA;EAEM,OAAA,QAAA;AACT;AAEO,SAAS,cAAA,CAId,OAAA,EAI2C;EAC3C,OAAO,kBAAA,CAAiD;IACtD,kBAAA;IACA,oBAAA;IACA,UAAA,EAAY,aAAA;IACZ,GAAG;EAAA,CACJ,CAAA;AACH;AAEO,SAAS,oBAAA,CACd,OAAA,EAOmC;EACnC,OAAO,kBAAA,CAAyC;IAC9C,gBAAA,EAAkB,CAAA,KAAO,OAAO,QAAA,KAAa,WAAA,GAAc,MAAA,GAAS,IAAA;IACpE,kBAAA,EAAoB,iBAAA;IACpB,oBAAA,EAAsB,mBAAA;IACtB,UAAA,EAAY,YAAA;IACZ,aAAA,EAAe,CAAA,KAAO,OAAO,QAAA,KAAa,WAAA,GAAc,MAAA,CAAO,OAAA,GAAU,CAAA;IACzE,GAAG;EAAA,CACJ,CAAA;AACH","sourcesContent":["import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  Virtualizer,\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  windowScroll,\n} from '@tanstack/virtual-core'\nimport type { PartialKeys, VirtualizerOptions } from '@tanstack/virtual-core'\n\nexport * from '@tanstack/virtual-core'\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}