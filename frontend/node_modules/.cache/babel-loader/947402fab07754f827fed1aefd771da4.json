{"ast":null,"code":"import { useEffectEvent as $8ae05eaa5c114e9c$export$7f54fc3180508a52 } from \"./useEffectEvent.module.js\";\nimport { useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c } from \"./useLayoutEffect.module.js\";\nimport { useState as $fCAlL$useState, useRef as $fCAlL$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {\n  let [value, setValue] = (0, $fCAlL$useState)(defaultValue);\n  let effect = (0, $fCAlL$useRef)(null);\n  // Store the function in a ref so we can always access the current version\n  // which has the proper `value` in scope.\n  let nextRef = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {\n    if (!effect.current) return;\n    // Run the generator to the next yield.\n    let newValue = effect.current.next();\n    // If the generator is done, reset the effect.\n    if (newValue.done) {\n      effect.current = null;\n      return;\n    }\n    // If the value is the same as the current value,\n    // then continue to the next yield. Otherwise,\n    // set the value in state and wait for the next layout effect.\n    if (value === newValue.value) nextRef();else setValue(newValue.value);\n  });\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {\n    // If there is an effect currently running, continue to the next yield.\n    if (effect.current) nextRef();\n  });\n  let queue = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(fn => {\n    effect.current = fn(value);\n    nextRef();\n  });\n  return [value, queue];\n}\nexport { $1dbecbe27a04f9af$export$14d238f342723f25 as useValueEffect };","map":{"version":3,"sources":["packages/@react-aria/utils/src/useValueEffect.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;AAUC;;AAWM,SAAS,yCAAA,CAAkB,YAA2B,EAAA;EAC3D,IAAI,CAAC,KAAA,EAAO,QAAA,CAAS,GAAG,CAAA,CAAA,EAAA,eAAO,EAAE,YAAA,CAAA;EACjC,IAAI,MAAA,GAAgD,CAAA,CAAA,EAAA,aAAK,EAAuB,IAAA,CAAA;EAEhF;EACA;EACA,IAAI,OAAA,GAAU,CAAA,CAAA,EAAA,yCAAa,EAAE,MAAA;IAC3B,IAAI,CAAC,MAAA,CAAO,OAAO,EACjB;IAEF;IACA,IAAI,QAAA,GAAW,MAAA,CAAO,OAAO,CAAC,IAAI,CAAA,CAAA;IAElC;IACA,IAAI,QAAA,CAAS,IAAI,EAAE;MACjB,MAAA,CAAO,OAAO,GAAG,IAAA;MACjB;IACF;IAEA;IACA;IACA;IACA,IAAI,KAAA,KAAU,QAAA,CAAS,KAAK,EAC1B,OAAA,CAAA,CAAA,CAAA,KAEA,QAAA,CAAS,QAAA,CAAS,KAAK,CAAA;EAE3B,CAAA,CAAA;EAEA,CAAA,CAAA,EAAA,yCAAc,EAAE,MAAA;IACd;IACA,IAAI,MAAA,CAAO,OAAO,EAChB,OAAA,CAAA,CAAA;EAEJ,CAAA,CAAA;EAEA,IAAI,KAAA,GAAQ,CAAA,CAAA,EAAA,yCAAa,EAAE,EAAA,IAAA;IACzB,MAAA,CAAO,OAAO,GAAG,EAAA,CAAG,KAAA,CAAA;IACpB,OAAA,CAAA,CAAA;EACF,CAAA,CAAA;EAEA,OAAO,CAAC,KAAA,EAAO,KAAA,CAAM;AACvB","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Dispatch, MutableRefObject, useRef, useState} from 'react';\nimport {useEffectEvent, useLayoutEffect} from './';\n\ntype SetValueAction<S> = (prev: S) => Generator<any, void, unknown>;\n\n// This hook works like `useState`, but when setting the value, you pass a generator function\n// that can yield multiple values. Each yielded value updates the state and waits for the next\n// layout effect, then continues the generator. This allows sequential updates to state to be\n// written linearly.\nexport function useValueEffect<S>(defaultValue: S | (() => S)): [S, Dispatch<SetValueAction<S>>] {\n  let [value, setValue] = useState(defaultValue);\n  let effect: MutableRefObject<Generator<S> | null> = useRef<Generator<S> | null>(null);\n\n  // Store the function in a ref so we can always access the current version\n  // which has the proper `value` in scope.\n  let nextRef = useEffectEvent(() => {\n    if (!effect.current) {\n      return;\n    }\n    // Run the generator to the next yield.\n    let newValue = effect.current.next();\n\n    // If the generator is done, reset the effect.\n    if (newValue.done) {\n      effect.current = null;\n      return;\n    }\n\n    // If the value is the same as the current value,\n    // then continue to the next yield. Otherwise,\n    // set the value in state and wait for the next layout effect.\n    if (value === newValue.value) {\n      nextRef();\n    } else {\n      setValue(newValue.value);\n    }\n  });\n\n  useLayoutEffect(() => {\n    // If there is an effect currently running, continue to the next yield.\n    if (effect.current) {\n      nextRef();\n    }\n  });\n\n  let queue = useEffectEvent(fn => {\n    effect.current = fn(value);\n    nextRef();\n  });\n\n  return [value, queue];\n}\n"]},"metadata":{},"sourceType":"module"}