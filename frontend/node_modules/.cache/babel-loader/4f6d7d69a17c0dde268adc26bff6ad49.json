{"ast":null,"code":"import { isElementVisible as $645f2e67b85a24c9$export$e989c0fffaa6b27a } from \"./isElementVisible.module.js\";\nimport { useLayoutEffect as $cgawC$useLayoutEffect, getActiveElement as $cgawC$getActiveElement, getOwnerDocument as $cgawC$getOwnerDocument, getEventTarget as $cgawC$getEventTarget, isAndroid as $cgawC$isAndroid, isChrome as $cgawC$isChrome, isTabbable as $cgawC$isTabbable, isFocusable as $cgawC$isFocusable, createShadowTreeWalker as $cgawC$createShadowTreeWalker } from \"@react-aria/utils\";\nimport { getInteractionModality as $cgawC$getInteractionModality, focusSafely as $cgawC$focusSafely } from \"@react-aria/interactions\";\nimport $cgawC$react, { useRef as $cgawC$useRef, useContext as $cgawC$useContext, useMemo as $cgawC$useMemo, useEffect as $cgawC$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $cgawC$react).createContext(null);\nconst $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $cgawC$useRef)(null);\n  let endRef = (0, $cgawC$useRef)(null);\n  let scopeRef = (0, $cgawC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $cgawC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (node) node.contain = !!contain;\n  }, [contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    var _startRef_current;\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;\n    let nodes = [];\n    let stopPropagation = e => e.stopPropagation();\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      // Stop custom restore focus event from propagating to parent focus scopes.\n      node.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n    return () => {\n      for (let node of nodes) node.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n    };\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  (0, $cgawC$useEffect)(() => {\n    const activeElement = (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined));\n    let scope = null;\n    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n    }\n  }, [scopeRef]);\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;\n      var _focusScopeTree_getTreeNode_parent_scopeRef;\n      // Scope may have been re-parented.\n      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n  let focusManager = (0, $cgawC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $cgawC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $cgawC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      var _scope_;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : undefined));\n      let sentinel = scope[0].previousElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      var _scope_;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : undefined));\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $cgawC$useRef)(undefined);\n  let raf = (0, $cgawC$useRef)(undefined);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = (0, $cgawC$getActiveElement)(ownerDocument);\n      let scope = scopeRef.current;\n      if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: true\n      }, scope);\n      if (!focusedElement) return;\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $cgawC$getEventTarget)(e), scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = (0, $cgawC$getEventTarget)(e);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope((0, $cgawC$getEventTarget)(e), scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = (0, $cgawC$getEventTarget)(e);\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Patches infinite focus coersion loop for Android Talkback where the user isn't able to move the virtual cursor\n        // if within a containing focus scope. Bug filed against Chrome: https://issuetracker.google.com/issues/384844019.\n        // Note that this means focus can leave focus containing modals due to this, but it is isolated to Chrome Talkback.\n        let modality = (0, $cgawC$getInteractionModality)();\n        let shouldSkipFocusRestore = (modality === 'virtual' || modality === null) && (0, $cgawC$isAndroid)() && (0, $cgawC$isChrome)();\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let activeElement = (0, $cgawC$getActiveElement)(ownerDocument);\n        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          let target = (0, $cgawC$getEventTarget)(e);\n          if (target && target.isConnected) {\n            var _focusedNode_current;\n            focusedNode.current = target;\n            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  if (!element) return false;\n  if (!scope) return false;\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n  if (element != null && !scroll) try {\n    (0, $cgawC$focusSafely)(element);\n  } catch {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  return nextNode;\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $cgawC$react).useRef(autoFocus);\n  (0, $cgawC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!$9bf71ea28793e738$var$isElementInScope((0, $cgawC$getActiveElement)(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $cgawC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    let onFocus = e => {\n      let target = (0, $cgawC$getEventTarget)(e);\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = (0, $cgawC$useRef)(typeof document !== 'undefined' ? (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined)) : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $cgawC$getActiveElement)(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (!treeNode) return;\n    var _nodeToRestoreRef_current;\n    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;\n    return () => {\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      let activeElement = (0, $cgawC$getActiveElement)(ownerDocument);\n      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                $9bf71ea28793e738$var$restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode.scopeRef.current, true);\n                $9bf71ea28793e738$var$restoreFocusToElement(node);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\nfunction $9bf71ea28793e738$var$restoreFocusToElement(node) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {\n    bubbles: true,\n    cancelable: true\n  }))) $9bf71ea28793e738$var$focusElement(node);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let filter = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? (0, $cgawC$isTabbable) : (0, $cgawC$isFocusable);\n  // Ensure that root is an Element or fall back appropriately\n  let rootElement = (root === null || root === void 0 ? void 0 : root.nodeType) === Node.ELEMENT_NODE ? root : null;\n  // Determine the document to use\n  let doc = (0, $cgawC$getOwnerDocument)(rootElement);\n  // Create a TreeWalker, ensuring the root is an Element or Document\n  let walker = (0, $cgawC$createShadowTreeWalker)(doc, root || doc, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (filter(node) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n  return {\n    focusNext(opts = {}) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(root));\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(root));\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next !== null && next !== void 0 ? next : null;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = $9bf71ea28793e738$var$last(walker);\n        if (!lastNode)\n          // couldn't wrap\n          return null;\n        previousNode = lastNode;\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode !== null && previousNode !== void 0 ? previousNode : null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next !== null && next !== void 0 ? next : null;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next = undefined;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    if (!parentNode) return;\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    if (!node) return;\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) children.forEach(child => parentNode && parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  *traverse(node = this.root) {\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n  clone() {\n    var _node_parent;\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    var _node_parent_scopeRef;\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$d06fae2ee68b101e as focusScopeTree, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager };","map":{"version":3,"sources":["packages/@react-aria/focus/src/FocusScope.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  createShadowTreeWalker,\n  getActiveElement,\n  getEventTarget,\n  getOwnerDocument,\n  isAndroid,\n  isChrome,\n  isFocusable,\n  isTabbable,\n  ShadowTreeWalker,\n  useLayoutEffect\n} from '@react-aria/utils';\nimport {FocusableElement, RefObject} from '@react-types/shared';\nimport {focusSafely, getInteractionModality} from '@react-aria/interactions';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, useContext, useEffect, useMemo, useRef} from 'react';\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement | null\n}\n\ntype ScopeRef = RefObject<Element[] | null> | null;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext | null>(null);\nconst RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps): ReactNode {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>(null);\n  let endRef = useRef<HTMLSpanElement>(null);\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    if (node) {\n      node.contain = !!contain;\n    }\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current?.nextSibling!;\n    let nodes: Element[] = [];\n    let stopPropagation = e => e.stopPropagation();\n    while (node && node !== endRef.current) {\n      nodes.push(node as Element);\n      // Stop custom restore focus event from propagating to parent focus scopes.\n      node.addEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling as Element;\n    }\n\n    scopeRef.current = nodes;\n\n    return () => {\n      for (let node of nodes) {\n        node.removeEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      }\n    };\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  useEffect(() => {\n    const activeElement = getActiveElement(getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined));\n    let scope: TreeNode | null = null;\n\n    if (isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of focusScopeTree.traverse()) {\n        if (node.scopeRef && isElementInScope(activeElement, node.scopeRef.current)) {\n          scope = node;\n        }\n      }\n\n      if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n        activeScope = scope.scopeRef;\n      }\n    }\n  }, [scopeRef]);\n\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  useLayoutEffect(() => {\n    return () => {\n      // Scope may have been re-parented.\n      let parentScope = focusScopeTree.getTreeNode(scopeRef)?.parent?.scopeRef ?? null;\n\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || focusScopeTree.getTreeNode(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      focusScopeTree.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager | undefined {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[] | null>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(scope[0] ?? undefined))!;\n      let sentinel = scope[0].previousElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(scope[0] ?? undefined))!;\n      let sentinel = scope[scope.length - 1].nextElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node  : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling!;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling!;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement!;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[] | null>, contain?: boolean) {\n  let focusedNode = useRef<FocusableElement>(undefined);\n\n  let raf = useRef<ReturnType<typeof requestAnimationFrame>>(undefined);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = getActiveElement(ownerDocument);\n      let scope = scopeRef.current;\n      if (!scope || !isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable: true}, scope);\n      if (!focusedElement) {\n        return;\n      }\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling! : scope[0].previousElementSibling!;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus: EventListener = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(getEventTarget(e) as Element, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = getEventTarget(e) as FocusableElement;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(getEventTarget(e) as Element, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope && activeScope.current) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = getEventTarget(e) as FocusableElement;\n      }\n    };\n\n    let onBlur: EventListener = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Patches infinite focus coersion loop for Android Talkback where the user isn't able to move the virtual cursor\n        // if within a containing focus scope. Bug filed against Chrome: https://issuetracker.google.com/issues/384844019.\n        // Note that this means focus can leave focus containing modals due to this, but it is isolated to Chrome Talkback.\n        let modality = getInteractionModality();\n        let shouldSkipFocusRestore = (modality === 'virtual' || modality === null) && isAndroid() && isChrome();\n\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let activeElement = getActiveElement(ownerDocument);\n        if (!shouldSkipFocusRestore && activeElement && shouldContainFocus(scopeRef) && !isElementInChildScope(activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          let target = getEventTarget(e) as FocusableElement;\n          if (target && target.isConnected) {\n            focusedNode.current = target;\n            focusedNode.current?.focus();\n          } else if (activeScope.current) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope?.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope?.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element?: Element | null, scope?: Element[] | null) {\n  if (!element) {\n    return false;\n  }\n  if (!scope) {\n    return false;\n  }\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (s && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element): boolean {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch {\n      // ignore\n    }\n  }\n}\n\nfunction getFirstInScope(scope: Element[], tabbable = true) {\n  let sentinel = scope[0].previousElementSibling!;\n  let scopeRoot = getScopeRoot(scope);\n  let walker = getFocusableTreeWalker(scopeRoot, {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = getScopeRoot(scope);\n    walker = getFocusableTreeWalker(scopeRoot, {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  return nextNode as FocusableElement;\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  focusElement(getFirstInScope(scope, tabbable));\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[] | null>, autoFocus?: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!isElementInScope(getActiveElement(ownerDocument), activeScope.current) && scopeRef.current) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[] | null>, restore?: boolean, contain?: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    let onFocus = (e) => {\n      let target = getEventTarget(e) as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[] | null>, restoreFocus?: boolean, contain?: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? getActiveElement(getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined)) as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n        isElementInScope(getActiveElement(ownerDocument), scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement as FocusableElement;\n      if (!isElementInChildScope(focusedElement, scopeRef) || !shouldRestoreFocus(scopeRef)) {\n        return;\n      }\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(ownerDocument.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInChildScope(nextElement, scopeRef));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      ownerDocument.addEventListener('keydown', onKeyDown as EventListener, true);\n    }\n\n    return () => {\n      if (!contain) {\n        ownerDocument.removeEventListener('keydown', onKeyDown as EventListener, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    let treeNode = focusScopeTree.getTreeNode(scopeRef);\n    if (!treeNode) {\n      return;\n    }\n    treeNode.nodeToRestore = nodeToRestoreRef.current ?? undefined;\n    return () => {\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      let activeElement = getActiveElement(ownerDocument);\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          ((activeElement && isElementInChildScope(activeElement, scopeRef)) || (activeElement === ownerDocument.body && shouldRestoreFocus(scopeRef)))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                let node = getFirstInScope(treeNode.scopeRef.current, true);\n                restoreFocusToElement(node);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\nfunction restoreFocusToElement(node: FocusableElement) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent(RESTORE_FOCUS_EVENT, {bubbles: true, cancelable: true}))) {\n    focusElement(node);\n  }\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]): ShadowTreeWalker | TreeWalker {\n  let filter = opts?.tabbable ? isTabbable : isFocusable;\n\n  // Ensure that root is an Element or fall back appropriately\n  let rootElement = root?.nodeType === Node.ELEMENT_NODE ? (root as Element) : null;\n\n  // Determine the document to use\n  let doc = getOwnerDocument(rootElement);\n\n  // Create a TreeWalker, ensuring the root is an Element or Document\n  let walker = createShadowTreeWalker(\n    doc,\n    root || doc,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if (filter(node as Element)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element | null>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(root));\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(root));\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next ?? null;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = last(walker);\n        if (!lastNode) {\n          // couldn't wrap\n          return null;\n        }\n        previousNode = lastNode;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode ?? null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next ?? null;\n    }\n  };\n}\n\nfunction last(walker: ShadowTreeWalker | TreeWalker) {\n  let next: FocusableElement | undefined = undefined;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    if (!parentNode) {\n      return;\n    }\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    if (!node) {\n      return;\n    }\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) {\n        children.forEach(child => parentNode && parentNode.addChild(child));\n      }\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent?.scopeRef ?? null, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore?: FocusableElement;\n  public parent?: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n"]},"metadata":{},"sourceType":"module"}