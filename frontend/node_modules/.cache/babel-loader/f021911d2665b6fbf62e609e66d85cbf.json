{"ast":null,"code":"import { isFocusVisible as $isWE5$isFocusVisible, useFocusVisibleListener as $isWE5$useFocusVisibleListener, useFocus as $isWE5$useFocus, useFocusWithin as $isWE5$useFocusWithin } from \"@react-aria/interactions\";\nimport { useRef as $isWE5$useRef, useState as $isWE5$useState, useCallback as $isWE5$useCallback } from \"react\";\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $isWE5$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $isWE5$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $isWE5$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $isWE5$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $isWE5$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $isWE5$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $isWE5$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $isWE5$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $isWE5$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nexport { $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing };","map":{"version":3,"sources":["packages/@react-aria/focus/src/useFocusRing.ts"],"names":[],"mappings":";;AAoCO,SAAS,yCAAA,CAAa,KAAA,GAA4B,CAAC,CAAC,EAAA;EACzD,IAAI;IACF,SAAA,GAAY,KAAA;IAAA,WAAA,EACZ,WAAW;IAAA,MAAA,EACX;EAAM,CACP,GAAG,KAAA;EACJ,IAAI,KAAA,GAAQ,CAAA,CAAA,EAAA,aAAK,EAAE;IACjB,SAAA,EAAW,KAAA;IACX,cAAA,EAAgB,SAAA,IAAa,CAAA,CAAA,EAAA,qBAAa,EAAA;EAC5C,CAAA,CAAA;EACA,IAAI,CAAC,SAAA,EAAW,UAAA,CAAW,GAAG,CAAA,CAAA,EAAA,eAAO,EAAE,KAAA,CAAA;EACvC,IAAI,CAAC,mBAAA,EAAqB,eAAA,CAAgB,GAAG,CAAA,CAAA,EAAA,eAAO,EAAE,MAAM,KAAA,CAAM,OAAO,CAAC,SAAS,IAAI,KAAA,CAAM,OAAO,CAAC,cAAc,CAAA;EAEnH,IAAI,WAAA,GAAc,CAAA,CAAA,EAAA,kBAAU,EAAE,MAAM,eAAA,CAAgB,KAAA,CAAM,OAAO,CAAC,SAAS,IAAI,KAAA,CAAM,OAAO,CAAC,cAAc,CAAA,EAAG,EAAE,CAAA;EAEhH,IAAI,aAAA,GAAgB,CAAA,CAAA,EAAA,kBAAU,EAAE,SAAA,IAAA;IAC9B,KAAA,CAAM,OAAO,CAAC,SAAS,GAAG,SAAA;IAC1B,UAAA,CAAW,SAAA,CAAA;IACX,WAAA,CAAA,CAAA;EACF,CAAA,EAAG,CAAC,WAAA,CAAY,CAAA;EAEhB,CAAA,CAAA,EAAA,8BAAsB,EAAG,cAAA,IAAA;IACvB,KAAA,CAAM,OAAO,CAAC,cAAc,GAAG,cAAA;IAC/B,WAAA,CAAA,CAAA;EACF,CAAA,EAAG,EAAE,EAAE;iBAAC;EAAW,CAAA,CAAA;EAEnB,IAAI;IAAA,UAAA,EAAC;EAAU,CAAC,GAAG,CAAA,CAAA,EAAA,eAAO,EAAE;IAC1B,UAAA,EAAY,MAAA;mBACZ;EACF,CAAA,CAAA;EAEA,IAAI;IAAA,gBAAA,EAAC;EAAgB,CAAC,GAAG,CAAA,CAAA,EAAA,qBAAa,EAAE;IACtC,UAAA,EAAY,CAAC,MAAA;IACb,mBAAA,EAAqB;EACvB,CAAA,CAAA;EAEA,OAAO;eACL,SAAA;IACA,cAAA,EAAgB,mBAAA;IAChB,UAAA,EAAY,MAAA,GAAS,gBAAA,GAAmB;EAC1C,CAAA;AACF","sourcesContent":["import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useRef, useState} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}