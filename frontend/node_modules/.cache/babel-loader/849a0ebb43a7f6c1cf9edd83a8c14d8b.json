{"ast":null,"code":"import { useState as $3whtM$useState, useRef as $3whtM$useRef, useEffect as $3whtM$useEffect, useCallback as $3whtM$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  let [stateValue, setStateValue] = (0, $3whtM$useState)(value || defaultValue);\n  let isControlledRef = (0, $3whtM$useRef)(value !== undefined);\n  let isControlled = value !== undefined;\n  (0, $3whtM$useEffect)(() => {\n    let wasControlled = isControlledRef.current;\n    if (wasControlled !== isControlled && process.env.NODE_ENV !== 'production') console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n    isControlledRef.current = isControlled;\n  }, [isControlled]);\n  let currentValue = isControlled ? value : stateValue;\n  let setValue = (0, $3whtM$useCallback)((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(currentValue, value)) onChange(value, ...onChangeArgs);\n      }\n      if (!isControlled)\n        // If uncontrolled, mutate the currentValue local variable so that\n        // calling setState multiple times with the same value only emits onChange once.\n        // We do not use a ref for this because we specifically _do_ want the value to\n        // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        currentValue = value;\n    };\n    if (typeof value === 'function') {\n      if (process.env.NODE_ENV !== 'production') console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, currentValue, onChange]);\n  return [currentValue, setValue];\n}\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState };","map":{"version":3,"sources":["packages/@react-stately/utils/src/useControlledState.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;AAUC;AAMM,SAAS,yCAAA,CAA6B,KAAQ,EAAE,YAAe,EAAE,QAAyC,EAAA;EAC/G,IAAI,CAAC,UAAA,EAAY,aAAA,CAAc,GAAG,CAAA,CAAA,EAAA,eAAO,EAAE,KAAA,IAAS,YAAA,CAAA;EAEpD,IAAI,eAAA,GAAkB,CAAA,CAAA,EAAA,aAAK,EAAE,KAAA,KAAU,SAAA,CAAA;EACvC,IAAI,YAAA,GAAe,KAAA,KAAU,SAAA;EAC7B,CAAA,CAAA,EAAA,gBAAQ,EAAE,MAAA;IACR,IAAI,aAAA,GAAgB,eAAA,CAAgB,OAAO;IAC3C,IAAI,aAAA,KAAkB,YAAA,IAAgB,OAAA,CAAQ,GAAG,CAAC,QAAQ,KAAK,YAAA,EAC7D,OAAA,CAAQ,IAAI,CAAC,kCAAkC,aAAA,GAAgB,YAAA,GAAe,cAAA,OAAqB,YAAA,GAAe,YAAA,GAAe,cAAA,GAAiB,CAAA;IAEpJ,eAAA,CAAgB,OAAO,GAAG,YAAA;EAC5B,CAAA,EAAG,CAAC,YAAA,CAAa,CAAA;EAEjB,IAAI,YAAA,GAAe,YAAA,GAAe,KAAA,GAAQ,UAAA;EAC1C,IAAI,QAAA,GAAW,CAAA,CAAA,EAAA,kBAAU,EAAE,CAAC,KAAA,EAAO,GAAG,IAAA,KAAA;IACpC,IAAI,cAAA,GAAiB,CAAC,KAAA,EAAO,GAAG,YAAA,KAAA;MAC9B,IAAI,QAAA,EACF;QAAA,IAAI,CAAC,MAAA,CAAO,EAAE,CAAC,YAAA,EAAc,KAAA,CAAA,EAC3B,QAAA,CAAS,KAAA,EAAA,GAAU,YAAA,CAAA;MACrB;MAEF,IAAI,CAAC,YAAA;QACH;QACA;QACA;QACA;QACA;QACA,YAAA,GAAe,KAAA;IAEnB,CAAA;IAEA,IAAI,OAAO,KAAA,KAAU,UAAA,EAAY;MAC/B,IAAI,OAAA,CAAQ,GAAG,CAAC,QAAQ,KAAK,YAAA,EAC3B,OAAA,CAAQ,IAAI,CAAC,2HAAA,CAAA;MAEf;MACA;MACA;MACA;MACA;MACA,IAAI,cAAA,GAAiB,CAAC,QAAA,EAAU,GAAG,YAAA,KAAA;QACjC,IAAI,gBAAA,GAAmB,KAAA,CAAM,YAAA,GAAe,YAAA,GAAe,QAAA,EAAA,GAAa,YAAA,CAAA;QACxE,cAAA,CAAe,gBAAA,EAAA,GAAqB,IAAA,CAAA;QACpC,IAAI,CAAC,YAAA,EACH,OAAO,gBAAA;QAET,OAAO,QAAA;MACT,CAAA;MACA,aAAA,CAAc,cAAA,CAAA;IAChB,CAAA,MAAO;MACL,IAAI,CAAC,YAAA,EACH,aAAA,CAAc,KAAA,CAAA;MAEhB,cAAA,CAAe,KAAA,EAAA,GAAU,IAAA,CAAA;IAC3B;EACF,CAAA,EAAG,CAAC,YAAA,EAAc,YAAA,EAAc,QAAA,CAAS,CAAA;EAEzC,OAAO,CAAC,YAAA,EAAc,QAAA,CAAS;AACjC","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\n\nexport function useControlledState<T, C = T>(value: Exclude<T, undefined>, defaultValue: Exclude<T, undefined> | undefined, onChange?: (v: C, ...args: any[]) => void): [T, (value: T, ...args: any[]) => void];\nexport function useControlledState<T, C = T>(value: Exclude<T, undefined> | undefined, defaultValue: Exclude<T, undefined>, onChange?: (v: C, ...args: any[]) => void): [T, (value: T, ...args: any[]) => void];\nexport function useControlledState<T, C = T>(value: T, defaultValue: T, onChange?: (v: C, ...args: any[]) => void): [T, (value: T, ...args: any[]) => void] {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n\n  let isControlledRef = useRef(value !== undefined);\n  let isControlled = value !== undefined;\n  useEffect(() => {\n    let wasControlled = isControlledRef.current;\n    if (wasControlled !== isControlled && process.env.NODE_ENV !== 'production') {\n      console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n    }\n    isControlledRef.current = isControlled;\n  }, [isControlled]);\n\n  let currentValue = isControlled ? value : stateValue;\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(currentValue, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        // If uncontrolled, mutate the currentValue local variable so that\n        // calling setState multiple times with the same value only emits onChange once.\n        // We do not use a ref for this because we specifically _do_ want the value to\n        // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        currentValue = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      }\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, currentValue, onChange]);\n\n  return [currentValue, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}