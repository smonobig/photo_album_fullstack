{"ast":null,"code":"/**\n * @license lucide-react v0.488.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst toCamelCase = string => string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase());\nconst toPascalCase = string => {\n  const camelCase = toCamelCase(string);\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nconst mergeClasses = (...classes) => classes.filter((className, index, array) => {\n  return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n}).join(\" \").trim();\nexport { mergeClasses, toCamelCase, toKebabCase, toPascalCase };","map":{"version":3,"sources":["../../../../../shared/src/utils.ts"],"names":[],"mappings":";;;;;;;AAQa,MAAA,WAAA,GAAe,MAC1B,IAAA,MAAA,CAAO,OAAA,CAAQ,oBAAsB,EAAA,OAAO,CAAA,CAAE,WAAY,CAAA,CAAA;AAQ/C,MAAA,WAAA,GAAiC,MAAA,IAC5C,MAAO,CAAA,OAAA,CAAQ,uBAAA,EAAyB,CAAC,KAAA,EAAO,EAAI,EAAA,EAAA,KAClD,EAAA,GAAK,EAAG,CAAA,WAAA,CAAA,CAAgB,GAAA,EAAA,CAAG,WAAY,CAAA,CACzC,CAAA;AAQW,MAAA,YAAA,GAAkC,MAAgC,IAAA;EACvE,MAAA,SAAA,GAAY,WAAA,CAAY,MAAM,CAAA;EAE5B,OAAA,SAAA,CAAU,MAAA,CAAO,CAAC,CAAA,CAAE,WAAA,CAAA,CAAgB,GAAA,SAAA,CAAU,KAAA,CAAM,CAAC,CAAA;AAC/D,CAAA;AAQa,MAAA,YAAA,GAAe,CAAA,GAA2C,OACrE,KAAA,OAAA,CACG,MAAA,CAAO,CAAC,SAAA,EAAW,KAAA,EAAO,KAAU,KAAA;EAEjC,OAAA,OAAA,CAAQ,SAAS,CAAA,IAChB,SAAqB,CAAA,IAAA,CAAA,CAAA,KAAW,EACjC,IAAA,KAAA,CAAM,OAAQ,CAAA,SAAS,CAAM,KAAA,KAAA;AAEjC,CAAC,CACA,CAAA,IAAA,CAAK,GAAG,CAAA,CACR,IAAK,CAAA,CAAA","sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to camel case\n *\n * @param {string} string\n * @returns {string} A camelized string\n */\nexport const toCamelCase = <T extends string>(string: T) =>\n  string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = toCamelCase(string);\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return (\n        Boolean(className) &&\n        (className as string).trim() !== '' &&\n        array.indexOf(className) === index\n      );\n    })\n    .join(' ')\n    .trim();\n"]},"metadata":{},"sourceType":"module"}