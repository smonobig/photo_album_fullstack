{"ast":null,"code":"import { isShadowRoot as $431fbd86ca7dc216$export$af51f0f06c0f328a } from \"./domHelpers.module.js\";\nimport { shadowDOM as $lcSu5$shadowDOM } from \"@react-stately/flags\";\n\n// Source: https://github.com/microsoft/tabster/blob/a89fc5d7e332d48f68d03b1ca6e344489d1c3898/src/Shadowdomize/DOMFunctions.ts#L16\n\nfunction $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {\n  if (!(0, $lcSu5$shadowDOM)()) return otherNode && node ? node.contains(otherNode) : false;\n  if (!node || !otherNode) return false;\n  let currentNode = otherNode;\n  while (currentNode !== null) {\n    if (currentNode === node) return true;\n    if (currentNode.tagName === 'SLOT' && currentNode.assignedSlot)\n      // Element is slotted\n      currentNode = currentNode.assignedSlot.parentNode;else if ((0, $431fbd86ca7dc216$export$af51f0f06c0f328a)(currentNode))\n      // Element is in shadow root\n      currentNode = currentNode.host;else currentNode = currentNode.parentNode;\n  }\n  return false;\n}\nconst $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {\n  var _activeElement_shadowRoot;\n  if (!(0, $lcSu5$shadowDOM)()) return doc.activeElement;\n  let activeElement = doc.activeElement;\n  while (activeElement && 'shadowRoot' in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n};\nfunction $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {\n  if ((0, $lcSu5$shadowDOM)() && event.target.shadowRoot) {\n    if (event.composedPath) return event.composedPath()[0];\n  }\n  return event.target;\n}\nexport { $d4ee10de306f2510$export$4282f70798064fe0 as nodeContains, $d4ee10de306f2510$export$cd4e5573fbe2b576 as getActiveElement, $d4ee10de306f2510$export$e58f029f0fbfdb29 as getEventTarget };","map":{"version":3,"sources":["packages/@react-aria/utils/src/shadowdom/DOMFunctions.ts"],"names":[],"mappings":";;;AAAA;;AAQO,SAAS,yCAAA,CACd,IAA6B,EAC7B,SAAkC,EAAA;EAElC,IAAI,CAAC,CAAA,CAAA,EAAA,gBAAQ,EAAA,CAAA,EACX,OAAO,SAAA,IAAa,IAAA,GAAO,IAAA,CAAK,QAAQ,CAAC,SAAA,CAAA,GAAa,KAAA;EAGxD,IAAI,CAAC,IAAA,IAAQ,CAAC,SAAA,EACZ,OAAO,KAAA;EAGT,IAAI,WAAA,GAAqD,SAAA;EAEzD,OAAO,WAAA,KAAgB,IAAA,EAAM;IAC3B,IAAI,WAAA,KAAgB,IAAA,EAClB,OAAO,IAAA;IAGT,IAAK,WAAA,CAAgC,OAAO,KAAK,MAAA,IAC9C,WAAA,CAAgC,YAAY;MAC7C;MACA,WAAA,GAAe,WAAA,CAAgC,YAAY,CAAE,UAAU,CAAA,KAClE,IAAI,CAAA,CAAA,EAAA,yCAAW,EAAE,WAAA,CAAA;MACtB;MACA,WAAA,GAAc,WAAA,CAAY,IAAI,CAAA,KAE9B,WAAA,GAAc,WAAA,CAAY,UAAU;EAExC;EAEA,OAAO,KAAA;AACT;AAKO,MAAM,yCAAA,GAAmB,CAAC,GAAA,GAAgB,QAAQ,KAAA;MAOvD,yBAAA;EANA,IAAI,CAAC,CAAA,CAAA,EAAA,gBAAQ,EAAA,CAAA,EACX,OAAO,GAAA,CAAI,aAAa;EAE1B,IAAI,aAAA,GAAgC,GAAA,CAAI,aAAa;EAErD,OAAO,aAAA,IAAiB,YAAA,IAAgB,aAAA,KAAA,CACxC,yBAAA,GAAA,aAAA,CAAc,UAAU,MAAA,IAAA,IAAxB,yBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,yBAAA,CAA0B,aAAa,CAAA,EACrC,aAAA,GAAgB,aAAA,CAAc,UAAU,CAAC,aAAa;EAGxD,OAAO,aAAA;AACT,CAAA;AAKO,SAAS,yCAAA,CAAgC,KAAQ,EAAA;EACtD,IAAI,CAAA,CAAA,EAAA,gBAAQ,EAAA,CAAA,IAAQ,KAAA,CAAM,MAAM,CAAiB,UAAU,EAAE;IAC3D,IAAI,KAAA,CAAM,YAAY,EACpB,OAAO,KAAA,CAAM,YAAY,CAAA,CAAE,CAAC,CAAA,CAAE;EAElC;EACA,OAAO,KAAA,CAAM,MAAM;AACrB","sourcesContent":["// Source: https://github.com/microsoft/tabster/blob/a89fc5d7e332d48f68d03b1ca6e344489d1c3898/src/Shadowdomize/DOMFunctions.ts#L16\n\nimport {isShadowRoot} from '../domHelpers';\nimport {shadowDOM} from '@react-stately/flags';\n\n/**\n * ShadowDOM safe version of Node.contains.\n */\nexport function nodeContains(\n  node: Node | null | undefined,\n  otherNode: Node | null | undefined\n): boolean {\n  if (!shadowDOM()) {\n    return otherNode && node ? node.contains(otherNode) : false;\n  }\n\n  if (!node || !otherNode) {\n    return false;\n  }\n\n  let currentNode: HTMLElement | Node | null | undefined = otherNode;\n\n  while (currentNode !== null) {\n    if (currentNode === node) {\n      return true;\n    }\n\n    if ((currentNode as HTMLSlotElement).tagName === 'SLOT' &&\n      (currentNode as HTMLSlotElement).assignedSlot) {\n      // Element is slotted\n      currentNode = (currentNode as HTMLSlotElement).assignedSlot!.parentNode;\n    } else if (isShadowRoot(currentNode)) {\n      // Element is in shadow root\n      currentNode = currentNode.host;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return false;\n}\n\n/**\n * ShadowDOM safe version of document.activeElement.\n */\nexport const getActiveElement = (doc: Document = document): Element | null => {\n  if (!shadowDOM()) {\n    return doc.activeElement;\n  }\n  let activeElement: Element | null = doc.activeElement;\n\n  while (activeElement && 'shadowRoot' in activeElement &&\n  activeElement.shadowRoot?.activeElement) {\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n\n  return activeElement;\n};\n\n/**\n * ShadowDOM safe version of event.target.\n */\nexport function getEventTarget<T extends Event>(event: T): Element {\n  if (shadowDOM() && (event.target as HTMLElement).shadowRoot) {\n    if (event.composedPath) {\n      return event.composedPath()[0] as Element;\n    }\n  }\n  return event.target as Element;\n}\n"]},"metadata":{},"sourceType":"module"}