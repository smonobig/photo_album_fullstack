{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */const $65484d02dcb7eb3e$var$DOMPropNames = new Set(['id']);\nconst $65484d02dcb7eb3e$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);\n// See LinkDOMProps in dom.d.ts.\nconst $65484d02dcb7eb3e$var$linkPropNames = new Set(['href', 'hrefLang', 'target', 'rel', 'download', 'ping', 'referrerPolicy']);\nconst $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;\nfunction $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {\n  let {\n    labelable: labelable,\n    isLink: isLink,\n    propNames: propNames\n  } = opts;\n  let filteredProps = {};\n  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];\n  return filteredProps;\n}\nexport { $65484d02dcb7eb3e$export$457c3d6518dd4c6f as filterDOMProps };","map":{"version":3,"sources":["packages/@react-aria/utils/src/filterDOMProps.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;AAUC,GAID,MAAM,kCAAA,GAAe,IAAI,GAAA,CAAI,CAC3B,IAAA,CACD,CAAA;AAED,MAAM,wCAAA,GAAqB,IAAI,GAAA,CAAI,CACjC,YAAA,EACA,iBAAA,EACA,kBAAA,EACA,cAAA,CACD,CAAA;AAED;AACA,MAAM,mCAAA,GAAgB,IAAI,GAAA,CAAI,CAC5B,MAAA,EACA,UAAA,EACA,QAAA,EACA,KAAA,EACA,UAAA,EACA,MAAA,EACA,gBAAA,CACD,CAAA;AAeD,MAAM,4BAAA,GAAS,aAAA;AAOR,SAAS,yCAAA,CAAe,KAAkD,EAAE,IAAA,GAAgB,CAAC,CAAC,EAAA;EACnG,IAAI;IAAA,SAAA,EAAC,SAAS;IAAA,MAAA,EAAE,MAAM;IAAA,SAAA,EAAE;EAAS,CAAC,GAAG,IAAA;EACrC,IAAI,aAAA,GAAgB,CAAC,CAAA;EAErB,KAAK,MAAM,IAAA,IAAQ,KAAA,EACjB,IACE,MAAA,CAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAA,EAAO,IAAA,CAAA,KAC1C,kCAAA,CAAa,GAAG,CAAC,IAAA,CAAA,IAChB,SAAA,IAAa,wCAAA,CAAmB,GAAG,CAAC,IAAA,CAAA,IACpC,MAAA,IAAU,mCAAA,CAAc,GAAG,CAAC,IAAA,CAAA,KAC7B,SAAA,KAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,GAAG,CAAC,IAAA,CAAA,CAAA,IACf,4BAAA,CAAO,IAAI,CAAC,IAAA,CAAI,CAAA,EAGlB,aAAa,CAAC,IAAA,CAAK,GAAG,KAAK,CAAC,IAAA,CAAK;EAIrC,OAAO,aAAA;AACT","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, LinkDOMProps} from '@react-types/shared';\n\nconst DOMPropNames = new Set([\n  'id'\n]);\n\nconst labelablePropNames = new Set([\n  'aria-label',\n  'aria-labelledby',\n  'aria-describedby',\n  'aria-details'\n]);\n\n// See LinkDOMProps in dom.d.ts.\nconst linkPropNames = new Set([\n  'href',\n  'hrefLang',\n  'target',\n  'rel',\n  'download',\n  'ping',\n  'referrerPolicy'\n]);\n\ninterface Options {\n  /**\n   * If labelling associated aria properties should be included in the filter.\n   */\n  labelable?: boolean,\n  /** Whether the element is a link and should include DOM props for <a> elements. */\n  isLink?: boolean,\n  /**\n   * A Set of other property names that should be included in the filter.\n   */\n  propNames?: Set<string>\n}\n\nconst propRe = /^(data-.*)$/;\n\n/**\n * Filters out all props that aren't valid DOM props or defined via override prop obj.\n * @param props - The component props to be filtered.\n * @param opts - Props to override.\n */\nexport function filterDOMProps(props: DOMProps & AriaLabelingProps & LinkDOMProps, opts: Options = {}): DOMProps & AriaLabelingProps {\n  let {labelable, isLink, propNames} = opts;\n  let filteredProps = {};\n\n  for (const prop in props) {\n    if (\n      Object.prototype.hasOwnProperty.call(props, prop) && (\n        DOMPropNames.has(prop) ||\n        (labelable && labelablePropNames.has(prop)) ||\n        (isLink && linkPropNames.has(prop)) ||\n        propNames?.has(prop) ||\n        propRe.test(prop)\n      )\n    ) {\n      filteredProps[prop] = props[prop];\n    }\n  }\n\n  return filteredProps;\n}\n"]},"metadata":{},"sourceType":"module"}