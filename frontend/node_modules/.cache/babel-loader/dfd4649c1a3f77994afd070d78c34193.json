{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n  return cachedRTLResult;\n}\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n    data = _ref.data,\n    rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createGridComponent(_ref2) {\n  var _class;\n  var getColumnOffset = _ref2.getColumnOffset,\n    getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n    getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n    getColumnWidth = _ref2.getColumnWidth,\n    getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n    getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n    getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n    getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n    getRowHeight = _ref2.getRowHeight,\n    getRowOffset = _ref2.getRowOffset,\n    getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n    getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n    initInstanceProps = _ref2.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n          columnWidth = _this$props.columnWidth,\n          direction = _this$props.direction,\n          rowHeight = _this$props.rowHeight;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientHeight = _event$currentTarget.clientHeight,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollTop = _event$currentTarget.scrollTop,\n          scrollHeight = _event$currentTarget.scrollHeight,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n      return _this;\n    }\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = Grid.prototype;\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n        scrollTop = _ref3.scrollTop;\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n        align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n        columnIndex = _ref4.columnIndex,\n        rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        height = _this$props2.height,\n        rowCount = _this$props2.rowCount,\n        width = _this$props2.width;\n      var _this$state = this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        initialScrollLeft = _this$props3.initialScrollLeft,\n        initialScrollTop = _this$props3.initialScrollTop;\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n        scrollLeft = _this$state2.scrollLeft,\n        scrollTop = _this$state2.scrollTop,\n        scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              var clientWidth = outerRef.clientWidth,\n                scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        columnCount = _this$props4.columnCount,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        rowCount = _this$props4.rowCount,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n        columnStartIndex = _this$_getHorizontalR[0],\n        columnStopIndex = _this$_getHorizontalR[1];\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n        rowStartIndex = _this$_getVerticalRan[0],\n        rowStopIndex = _this$_getVerticalRan[1];\n      var items = [];\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n        columnCount = _this$props5.columnCount,\n        onItemsRendered = _this$props5.onItemsRendered,\n        onScroll = _this$props5.onScroll,\n        rowCount = _this$props5.rowCount;\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n            _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n            _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n            _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n            _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n            _overscanRowStartIndex = _this$_getVerticalRan2[0],\n            _overscanRowStopIndex = _this$_getVerticalRan2[1],\n            _visibleRowStartIndex = _this$_getVerticalRan2[2],\n            _visibleRowStopIndex = _this$_getVerticalRan2[3];\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n          _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n          _scrollLeft = _this$state3.scrollLeft,\n          _scrollTop = _this$state3.scrollTop,\n          _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n          _verticalScrollDirection = _this$state3.verticalScrollDirection;\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n        columnCount = _this$props6.columnCount,\n        overscanColumnCount = _this$props6.overscanColumnCount,\n        overscanColumnsCount = _this$props6.overscanColumnsCount,\n        overscanCount = _this$props6.overscanCount,\n        rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n        horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n        isScrolling = _this$state4.isScrolling,\n        scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n        columnCount = _this$props7.columnCount,\n        overscanCount = _this$props7.overscanCount,\n        overscanRowCount = _this$props7.overscanRowCount,\n        overscanRowsCount = _this$props7.overscanRowsCount,\n        rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n        isScrolling = _this$state5.isScrolling,\n        verticalScrollDirection = _this$state5.verticalScrollDirection,\n        scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n    direction = _ref5.direction,\n    height = _ref5.height,\n    innerTagName = _ref5.innerTagName,\n    outerTagName = _ref5.outerTagName,\n    overscanColumnsCount = _ref5.overscanColumnsCount,\n    overscanCount = _ref5.overscanCount,\n    overscanRowsCount = _ref5.overscanRowsCount,\n    width = _ref5.width;\n  var instance = _ref6.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n    estimatedRowHeight = _ref2.estimatedRowHeight,\n    lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n    estimatedColumnWidth = _ref4.estimatedColumnWidth,\n    lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n      width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n      height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n      estimatedColumnWidth = _ref5.estimatedColumnWidth,\n      estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n        rowIndex = _ref6.rowIndex,\n        _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n        shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n      rowHeight = _ref7.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createListComponent(_ref) {\n  var _class;\n  var getItemOffset = _ref.getItemOffset,\n    getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n    getItemSize = _ref.getItemSize,\n    getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n    getStartIndexForOffset = _ref.getStartIndexForOffset,\n    getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n    initInstanceProps = _ref.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n          direction = _this$props.direction,\n          itemSize = _this$props.itemSize,\n          layout = _this$props.layout;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n        var style;\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n          clientHeight = _event$currentTarget2.clientHeight,\n          scrollHeight = _event$currentTarget2.scrollHeight,\n          scrollTop = _event$currentTarget2.scrollTop;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n      return _this;\n    }\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = List.prototype;\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n      var itemCount = this.props.itemCount;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1));\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n        direction = _this$props2.direction,\n        initialScrollOffset = _this$props2.initialScrollOffset,\n        layout = _this$props2.layout;\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props3 = this.props,\n        direction = _this$props3.direction,\n        layout = _this$props3.layout;\n      var _this$state = this.state,\n        scrollOffset = _this$state.scrollOffset,\n        scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemCount = _this$props4.itemCount,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,\n        layout = _this$props4.layout,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n      var _this$_getRangeToRend = this._getRangeToRender(),\n        startIndex = _this$_getRangeToRend[0],\n        stopIndex = _this$_getRangeToRend[1];\n      var items = [];\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n            _overscanStartIndex = _this$_getRangeToRend2[0],\n            _overscanStopIndex = _this$_getRangeToRend2[1],\n            _visibleStartIndex = _this$_getRangeToRend2[2],\n            _visibleStopIndex = _this$_getRangeToRend2[3];\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n          _scrollDirection = _this$state2.scrollDirection,\n          _scrollOffset = _this$state2.scrollOffset,\n          _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props5 = this.props,\n        itemCount = _this$props5.itemCount,\n        overscanCount = _this$props5.overscanCount;\n      var _this$state3 = this.state,\n        isScrolling = _this$state3.isScrolling,\n        scrollDirection = _this$state3.scrollDirection,\n        scrollOffset = _this$state3.scrollOffset;\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n    direction = _ref2.direction,\n    height = _ref2.height,\n    layout = _ref2.layout,\n    innerTagName = _ref2.innerTagName,\n    outerTagName = _ref2.outerTagName,\n    width = _ref2.width;\n  var instance = _ref3.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n    itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    instanceProps.lastMeasuredIndex = index;\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n    estimatedItemSize = _ref3.estimatedItemSize,\n    lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      itemCount = props.itemCount,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n      estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n      rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n      columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n      columnWidth = _ref7.columnWidth,\n      width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n      height = _ref8.height,\n      rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n      columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n      columnCount = _ref10.columnCount,\n      width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n      rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n      rowCount = _ref12.rowCount,\n      height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n      rowHeight = _ref13.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n      itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n      height = _ref4.height,\n      itemCount = _ref4.itemCount,\n      itemSize = _ref4.itemSize,\n      layout = _ref4.layout,\n      width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n      itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n      height = _ref6.height,\n      itemCount = _ref6.itemCount,\n      itemSize = _ref6.itemSize,\n      layout = _ref6.layout,\n      width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n    prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n  var nextStyle = nextProps.style,\n    nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"sources":["../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","PureComponent","_instanceProps","props","_resetIsScrollingTimeoutId","_outerRef","defaultProps","itemData","undefined","useIsScrolling","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","getDerivedStateFromProps","nextProps","prevState","validateSharedProps","scrollTo","Math","max","setState","_resetIsScrollingDebounced","scrollToItem","align","columnCount","rowCount","scrollbarSize","min","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","outerRef","_callPropsCallbacks","componentDidUpdate","scrollWidth","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemKey","outerElementType","outerTagName","columnStartIndex","columnStopIndex","_getHorizontalRangeToRender","rowStartIndex","rowStopIndex","_getVerticalRangeToRender","items","push","key","_getItemStyle","onScroll","_onScroll","ref","_outerRefSetter","position","WebkitOverflowScrolling","willChange","pointerEvents","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","hasOwnProperty","offset","isRtl","left","right","top","_","__","___","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","event","clientHeight","scrollHeight","currentTarget","calculatedScrollLeft","calculatedScrollTop","current","_resetIsScrolling","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","devWarningsDirection","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","layout","scrollDirection","initialScrollOffset","isHorizontal","_onScrollHorizontal","_onScrollVertical","_getRangeToRender","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","offsetHorizontal","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"mappings":"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","sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}