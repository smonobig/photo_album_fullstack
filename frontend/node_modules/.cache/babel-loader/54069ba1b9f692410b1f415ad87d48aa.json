{"ast":null,"code":"import { useRef as $lPAwt$useRef, useCallback as $lPAwt$useCallback, useEffect as $lPAwt$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n  let globalListeners = (0, $lPAwt$useRef)(new Map());\n  let addGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {\n      type: type,\n      eventTarget: eventTarget,\n      fn: fn,\n      options: options\n    });\n    eventTarget.addEventListener(type, fn, options);\n  }, []);\n  let removeGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    var _globalListeners_current_get;\n    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = (0, $lPAwt$useCallback)(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n  (0, $lPAwt$useEffect)(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n  return {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  };\n}\nexport { $03deb23ff14920c4$export$4eaf04e54aa8eed6 as useGlobalListeners };","map":{"version":3,"sources":["packages/@react-aria/utils/src/useGlobalListeners.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;AAUC;AAaM,SAAS,yCAAA,CAAA,EAAA;EACd,IAAI,eAAA,GAAkB,CAAA,CAAA,EAAA,aAAK,EAAE,IAAI,GAAA,CAAA,CAAA,CAAA;EACjC,IAAI,iBAAA,GAAoB,CAAA,CAAA,EAAA,kBAAU,EAAE,CAAC,WAAA,EAAa,IAAA,EAAM,QAAA,EAAU,OAAA,KAAA;IAChE;IACA,IAAI,EAAA,GAAK,CAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,IAAI,IAAG,CAAC,GAAG,IAAA,KAAA;MAC3B,eAAA,CAAgB,OAAO,CAAC,MAAM,CAAC,QAAA,CAAA;MAC/B,QAAA,CAAA,GAAY,IAAA,CAAA;IACd,CAAA,GAAI,QAAA;IACJ,eAAA,CAAgB,OAAO,CAAC,GAAG,CAAC,QAAA,EAAU;YAAC,IAAA;mBAAM,WAAA;UAAa,EAAA;eAAI;IAAO,CAAA,CAAA;IACrE,WAAA,CAAY,gBAAgB,CAAC,IAAA,EAAM,EAAA,EAAI,OAAA,CAAA;EACzC,CAAA,EAAG,EAAE,CAAA;EACL,IAAI,oBAAA,GAAuB,CAAA,CAAA,EAAA,kBAAU,EAAE,CAAC,WAAA,EAAa,IAAA,EAAM,QAAA,EAAU,OAAA,KAAA;QAC1D,4BAAA;IAAT,IAAI,EAAA,GAAK,CAAA,CAAA,4BAAA,GAAA,eAAA,CAAgB,OAAO,CAAC,GAAG,CAAC,QAAA,CAAA,MAAA,IAAA,IAA5B,4BAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,4BAAA,CAAuC,EAAE,KAAI,QAAA;IACtD,WAAA,CAAY,mBAAmB,CAAC,IAAA,EAAM,EAAA,EAAI,OAAA,CAAA;IAC1C,eAAA,CAAgB,OAAO,CAAC,MAAM,CAAC,QAAA,CAAA;EACjC,CAAA,EAAG,EAAE,CAAA;EACL,IAAI,wBAAA,GAA2B,CAAA,CAAA,EAAA,kBAAU,EAAE,MAAA;IACzC,eAAA,CAAgB,OAAO,CAAC,OAAO,CAAC,CAAC,KAAA,EAAO,GAAA,KAAA;MACtC,oBAAA,CAAqB,KAAA,CAAM,WAAW,EAAE,KAAA,CAAM,IAAI,EAAE,GAAA,EAAK,KAAA,CAAM,OAAO,CAAA;IACxE,CAAA,CAAA;EACF,CAAA,EAAG,CAAC,oBAAA,CAAqB,CAAA;EAGzB,CAAA,CAAA,EAAA,gBAAQ,EAAE,MAAA;IACR,OAAO,wBAAA;EACT,CAAA,EAAG,CAAC,wBAAA,CAAyB,CAAA;EAE7B,OAAO;uBAAC,iBAAA;0BAAmB,oBAAA;8BAAsB;EAAwB,CAAA;AAC3E","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef} from 'react';\n\ninterface GlobalListeners {\n  addGlobalListener<K extends keyof WindowEventMap>(el: Window, type: K, listener: (this: Document, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void,\n  removeGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void,\n  removeGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void,\n  removeAllGlobalListeners(): void\n}\n\nexport function useGlobalListeners(): GlobalListeners {\n  let globalListeners = useRef(new Map());\n  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = options?.once ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {type, eventTarget, fn, options});\n    eventTarget.addEventListener(type, fn, options);\n  }, []);\n  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    let fn = globalListeners.current.get(listener)?.fn || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = useCallback(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n\n   \n  useEffect(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n\n  return {addGlobalListener, removeGlobalListener, removeAllGlobalListeners};\n}\n"]},"metadata":{},"sourceType":"module"}